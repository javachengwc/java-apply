分布式事务中的2PC是指两阶段提交，将整个事务流程分为两个阶段，准备阶段（Prepare phase）、提交阶段（commit phase）。
2是指两个阶段，P是指准备阶段，C是指提交阶段。
1. 准备阶段（Prepare phase）：事务管理器给每个参与者发送Prepare消息，每个数据库参与者在本地执行事务，
并写本地的Undo/Redo日志，此时事务没有提交。
2. 提交阶段（commit phase）：如果事务管理器收到了参与者的执行失败或者超时消息时，直接给每个参与者发送回滚(Rollback)消息；
否则，发送提交(Commit)消息；参与者根据事务管理器的指令执行提交或者回滚操作，并释放事务处理过程中使用的锁资源。

2PC的传统方案是在数据库层面实现的，如Oracle、MySQL都支持2PC协议。
为了统一标准减少行业内不必要的对接成本，需要制定标准化的处理模型及接口标准，
国际开放标准组织Open Group定义了分布式事务处理模型DTP（Distributed Transaction Processing Reference Model）。

DTP模型定义如下角色：
AP(Application Program)：即应用程序。
TM(Transaction Manager)：事务管理器，负责协调和管理事务，它控制着全局事务，管理事务生命周期，并协调各个RM。
RM(Resource Manager)：即资源管理器，它控制着分支事务，一般情况下是指一个数据库实例，通过资源管理器对该数据库进行控制。
XA协议：DTP模型定义TM和RM之间通讯的接口规范，简单理解为数据库提供的2PC接口协议，基于数据库的XA协议来实现2PC称为XA方案。
1）在准备阶段RM执行实际的业务操作，但不提交事务，资源锁定；
2）在提交阶段TM会接受RM在准备阶段的执行回复，只要有任一个RM执行失败，TM会通知所有RM执行回滚操作，
   否则，TM将会通知所有RM提交该事务。提交阶段结束资源锁释放。
XA方案的问题：
1、需要本地数据库支持XA协议。
2、资源锁需要等到两个阶段结束才释放，性能较差。

Seata是使用2PC两阶段提交模式实现分布式事务的框架。它通过对本地关系数据库的分支事务的协调来驱动完成全局事务，
是工作在应用层的中间件。主要优点是性能较好，且不长时间占用连接资源，它以高效并且对业务0侵入的方式解决微服
务场景下面临的分布式事务问题，它目前提供AT模式(即2PC)及TCC模式的分布式事务解决方案。
Seata把一个分布式事务理解成一个包含了若干分支事务的全局事务。全局事务的职责是协调其下管辖的分支事务达成一致，
要么一起成功提交，要么一起失败回滚。通常分支事务本身就是一个关系数据库的本地事务。
Seata定义了3个组件来协议分布式事务的处理过程：
Transaction Coordinator (TC)： 事务协调器，它是独立的中间件，需要独立部署运行，它维护全局事务的运行状态，
接收TM指令发起全局事务的提交与回滚，负责与RM通信协调各各分支事务的提交或回滚。
Transaction Manager (TM)： 事务管理器，TM需要嵌入应用程序中工作，
它负责开启一个全局事务，并最终向TC发起全局提交或全局回滚的指令。
Resource Manager (RM)： 控制分支事务，负责分支注册、状态汇报，
并接收事务协调器TC的指令，驱动分支（本地）事务的提交和回滚。

Seata实现2PC与传统2PC的差别：
架构层次方面，传统2PC方案的 RM 是在数据库层，RM本质是数据库自身，通过XA协议实现，
而Seata的 RM 是以jar包的形式作为中间件层部署在应用程序这一侧。
两阶段提交方面，传统2PC无论第二阶段的决议是commit还是rollback，事务性资源的锁都要保持到Phase2完成才释放。
而Seata是在Phase1就将本地事务提交，省去Phase2持锁的时间，整体提高效率。

Seata执行流程见(Seata执行提交流程.png,Seata执行回滚流程.png)，说明如下：
1、每个RM使用DataSourceProxy连接数据库，其目的是使用ConnectionProxy，使用数据源和数据连接代理的目
的就是在第一阶段将undo_log和业务数据放在一个本地事务提交，这样就保存了只要有业务操作就一定有undo_log。
2、在第一阶段undo_log中存放了数据修改前和修改后的值，为事务回滚作好准备，
所以第一阶段完成就已经将分支事务提交，也就释放了锁资源。
3、TM开启全局事务开始，将XID全局事务id放在事务上下文中，通过feign调用也将XID传入下游分支事务，
每个分支事务将自己的Branch ID分支事务ID与XID关联。
4、第二阶段全局事务提交，TC会通知各各分支参与者提交分支事务，在第一阶段就已经提交了分支事务，
这里各各参与者只需要删除undo_log即可，并且可以异步执行，第二阶段很快可以完成。
5、第二阶段全局事务回滚，TC会通知各各分支参与者回滚分支事务，通过 XID 和 Branch ID 找到相应的回滚日志，
通过回滚日志生成反向的 SQL 并执行，以完成分支事务回滚到之前的状态，如果回滚失败则会重试回滚操作。