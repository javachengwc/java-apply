-------------------------------io同步异步阻塞非阻塞------------------------------
服务器端编程经常需要构造高性能的IO模型，常见的IO模型有四种：
同步阻塞IO（Blocking IO）：即传统的IO模型。
同步非阻塞IO（Non-blocking IO）：默认创建的socket都是阻塞的，非阻塞IO要求socket被设置为NONBLOCK。
IO多路复用（IO Multiplexing）：即经典的Reactor设计模式，Java中的Selector和Linux中的epoll都是这种模型。
异步IO（Asynchronous IO）：即经典的Proactor设计模式，也称为异步非阻塞IO。

同步阻塞IO
    用户线程通过系统调用read发起IO读操作，由用户空间转到内核空间。内核等到数据包到达后，然后将接收的数据拷贝到用户空间，完成read操作。
用户需要等待read将socket中的数据读取到buffer后，才继续处理接收的数据。整个IO请求的过程中，用户线程是被阻塞的，
这导致用户在发起IO请求时，不能做任何事情，对CPU的资源利用率不够。

同步非阻塞IO
    是在同步阻塞IO的基础上，将socket设置为NONBLOCK。这样做用户线程可以在发起IO请求后可以立即返回。
由于socket是非阻塞的方式，因此用户线程发起IO请求时立即返回。但并未读取到任何数据，
用户线程需要不断地发起IO请求，直到数据到达后，才真正读取到数据，继续执行。
用户需要不断地调用read，尝试读取socket中的数据，直到读取成功后，才继续处理接收的数据。
整个IO请求的过程中，虽然用户线程每次发起IO请求后可以立即返回，但是为了等到数据，仍需要不断地轮询、重复请求，消耗了大量的CPU的资源。
一般很少直接使用这种模型，而是在其他IO模型中使用非阻塞IO这一特性。

IO多路复用
    是建立在内核提供的多路分离函数select基础之上的，使用select函数可以避免同步非阻塞IO模型中轮询等待的问题。
从流程上来看，使用select函数进行IO请求和同步阻塞模型没有太大的区别，甚至还多了添加监视socket，以及调用select函数的额外操作，效率更差。
但是，使用select以后最大的优势是用户可以在一个线程内同时处理多个socket的IO请求。
用户可以注册多个socket，然后不断地调用select读取被激活的socket，即可达到在同一个线程内同时处理多个IO请求的目的。
而在同步阻塞模型中，必须通过多线程的方式才能达到这个目的。
其中while循环前将socket添加到select监视中，然后在while内一直调用select获取被激活的socket，
一旦socket可读，便调用read函数将socket中的数据读取出来。
IO多路复用模型使用了Reactor设计模式实现了这一机制。
通过Reactor的方式，可以将用户线程轮询IO操作状态的工作统一交给handle_events事件循环进行处理。
用户线程注册事件处理器之后可以继续执行做其他的工作（异步），而Reactor线程负责调用内核的select函数检查socket状态。
当有socket被激活时，则通知相应的用户线程（或执行用户线程的回调函数），执行handle_event进行数据读取、处理的工作。
由于select函数是阻塞的，因此多路IO复用模型也被称为异步阻塞IO模型。
注意，这里的所说的阻塞是指select函数执行时线程被阻塞，而不是指socket。
一般在使用IO多路复用模型时，socket都是设置为NONBLOCK的，
不过这并不会产生影响，因为用户发起IO请求时，数据已经到达了，用户线程一定不会被阻塞。

异步IO
    “真正”的异步IO需要操作系统更强的支持。
异步IO模型中，用户线程直接使用内核提供的异步IO API发起read请求，且发起后立即返回，
继续执行用户线程代码。不过此时用户线程已经将调用的AsynchronousOperation和CompletionHandler注册到内核，
然后操作系统开启独立的内核线程去处理IO操作。
当read请求的数据到达时，由内核负责读取socket中的数据，并写入用户指定的缓冲区中。
最后内核将read的数据和用户线程注册的CompletionHandler分发给内部Proactor，
Proactor将IO完成的信息通知给用户线程（一般通过调用用户线程注册的完成事件处理函数），完成异步IO。
Proactor模式中，用户线程将AsynchronousOperation（读/写等）、Proactor以及操作完成时的CompletionHandler注册到AsynchronousOperationProcessor。
AsynchronousOperationProcessor使用Facade模式提供了一组异步操作API（读/写等）供用户使用，
当用户线程调用异步API后，便继续执行自己的任务。AsynchronousOperationProcessor 会开启独立的内核线程执行异步操作，实现真正的异步。
当异步IO操作完成时，AsynchronousOperationProcessor将用户线程与AsynchronousOperation一起注册的Proactor和CompletionHandler取出，
然后将CompletionHandler与IO操作的结果数据一起转发给Proactor，Proactor负责回调每一个异步操作的事件完成处理函数handle_event。
虽然Proactor模式中每个异步操作都可以绑定一个Proactor对象，但是一般在操作系统中，Proactor被实现为Singleton模式，以便于集中化分发操作完成事件。

---------------------------------------------------------------------------------