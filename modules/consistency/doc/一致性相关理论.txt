ACID-----数据库事务四个基本要素
    原子性（Atomicity）：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。
    一致性（Consistency）：在事务开始或结束时，数据库应该在一致状态。
    隔离性（Isolation）：可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。
                         事务将假定只有它自己在操作数据库，彼此不知晓。
    持久性（Durability）：一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响。

CAP-----分布式系统CAP理论，也叫布鲁尔定理
    在设计分布式系统时，当涉及读写操作时，
    一致性（Consistent）、可用性（Availability）、可靠性（分区容错性Partition Tolerance）三个属性不可能同时满足。
    Consistency(一致性): 所有的节点上的数据时刻保持同步，读操作保证能返回最新的写操作的结果。
    Availability(可用性): 非故障节点在合理时间内返回合理的响应（不是错误和超时的响应）。
    Partition tolerance(分区容错性):在遇到某节点或网络分区故障的时候，仍然能够对外提供服务。
        分布式系统一般部署多台服务器，分布在局域网或互联网中，服务器之间进行网络通信。
        网络分区故障就是在网络通信过程中，信息交换出现了问题，比如丢包，中断或拥堵等。
        分区容错性就是在网络分区故障时，系统整体上仍能继续运行。
        即便是返回一个响应超时结果，或则是返回一个旧的数据，都是分区容错的表现。

BASE-----BASE理论是对CAP理论的延伸，核心思想是分布式系统即使无法做到强一致性，可采用适合的方式达到最终一致性。
    基本可用(Basically Available):分布式系统在出现故障的时候，允许损失部分可用性，即保证核心可用。
        电商大促时，为了应对访问量激增，部分用户可能会被引导到降级页面，服务层也可能只提供降级服务。这就是损失部分可用性的体现。
    软状态(Soft State):允许系统存在中间状态，而该中间状态不会影响系统整体可用性。
        分布式存储中一般一份数据一般会有多份个副本，允许不同节点间副本同步的延时就是软状态的体现。
        mysql replication的异步复制也是一种体现。
    最终一致性(Eventual Consistency):系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。

一致性算法
    Paxos算法(发音为帕克索斯),一种基于消息传递的一致性算法,被认为是类似算法中最有效的。
    Raft算法是一种为了管理复制日志的一致性算法。它提供了和Paxos算法相同的功能和性能，
    但是它的算法结构和 Paxos 不同，Raft算法更加容易理解并且更容易构建实际的系统。
    Raft也使用了分而治之的思想把算法流程分为三个子问题：
    选举（Leader election）、日志复制（Log replication）、安全性（Safety）三个子问题。
------------------------------------------------------------------------------
数据一致性的选型基本可以归为两类：一种是基于Leader 的非对等部署的单点写一致性，一种是对等部署的多写一致性。
比如选用服务注册中心的时候，如果当注册的服务节点不会定时发送心跳到注册中心时，强一致协议看起来是唯一的选择，
因为无法通过心跳来进行数据的补偿注册，第一次注册就必须保证数据不会丢失。
而实际情况是注册的服务节点(客户端)一般都会定时发送心跳来汇报健康状态时，第一次的注册的成功率并不是非常关键（只是相对来说可以容忍数据的少量写失败），
因为后续还可以通过心跳再把数据补偿上来，此时 Paxos 协议的单点瓶颈就会不太划算了，
这也是 eureka 为什么不采用 Paxos 协议而采用自定义的 Renew 机制的原因。





