location 语法: location [=|~|~*|^~] /uri/ { … }

location指令匹配url,可配置使用常规字符串和正则表达式。如果使用正则表达式，必须使用 ~* 前缀不区分大小写的匹配或者 ~ 区分大小写的匹配

location匹配优先级别

(location =)          >
(location 完整路径 )  >
(location ^~ 路径)    >
(location ~*, ~ 正则) >
(location 部分起始路径)

正则表达式根据配置文件中的前后顺序影响匹配, 前面的优先匹配.
路径则根据匹配长度来优先匹配.

eg:
    location = / {
        # 执行严格匹配,只匹配 / 查询。
        [ configuration A ]
    }
    location / {
        # 匹配任何查询，因为所有请求都以 / 开头。但是正则表达式规则和长的块规则将被优先和查询匹配。
        [ configuration B ]
    }

    location ^~ /images/ {
        #使用 ^~ 前缀。如果这个前缀用于一个常规字符串那么如果路径匹配则不测试正则表达式
        # 匹配任何已 /images/ 开头的任何查询并且停止搜索。任何正则表达式将不会被测试。
        [ configuration C ]
    }

    location ~* \.(gif|jpg|jpeg)$ {
        # 匹配任何已 gif、jpg 或 jpeg 结尾的请求。然而所有 /images/ 目录的请求将使用 Configuration C。
        [ configuration D ]
    }

    /                        -> configuration A
    /documents/document.html -> configuration B
    /images/1.gif            -> configuration C
    /documents/1.jpg         -> configuration D

~ 为区分大小写匹配
~* 为不区分大小写匹配
!~为区分大小写不匹配
!~*为不区分大小写不匹配
-f和!-f用来判断是否存在文件
-d和!-d用来判断是否存在目录
-e和!-e用来判断是否存在文件或目录
-x和!-x用来判断文件是否可执行
last 相当于Apache里的[L]标记
break 终止匹配, 不再匹配后面的规则
redirect 返回302重定向 地址栏会显示跳转后的地址
permanent 返回301永久重定向 地址栏会显示跳转后的地址

case1:
location /demo {
    root /data/html;
}

case2:
location /demo {
    alias /data/ccc;
}

当url为/demo/index.html是，case1中实际访问的服务器资源路径是:/data/html/demo/index.html
而如果是case2，实际访问的服务器资源路径是:/data/ccc/index.html
root与alias的区别就是:
root指令会将url路径带入到"root指令路径"中,将带入后的路径作为最终资源路径。
alias指令则把location的路径，用别名路径代替，带入到访问url路径，形成最终资源路径。
------------------------------------------------------------