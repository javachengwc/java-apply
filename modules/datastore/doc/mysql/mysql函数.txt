--------------------mysql常用函数-------------------

字符串函数
varchar类型
    MySQL 5.0.3 之前：0–255字节，如：varchar(20)中的20表示字节数，如果存放utf-8编码的话只能放6个汉字。varchar(n)，这里的n表示字节数。
    MySQL 5.0.3 之后：0–65535字节，varchar(20)表示字符数，不管什么编码，既汉字也能放20个。但最多占65532字节（两个字节存放长度，小于255字节用1个字节存放长度），
    varchar(n)这里的n表示字符数，比如varchar（20），不管是英文还是中文都可以存放20个。
--------------------------
concat(str1,str2,...)
　把参数连成一个长字符串并返回(任何参数是NULL时返回NULL)

mysql> select CONCAT('My', 'S', 'QL');
　　-> 'MySQL'
mysql> select CONCAT('My', NULL, 'QL');
　　-> NULL
mysql> select CONCAT(14.3);
　　-> '14.3'

substring_index(str,substr,count)
  str:要处理的字符串
  substr:分隔符
  count:计数
  如果count是正数，那么返回的是从左往右数，第N个分隔符的左边的全部内容
  如果count是负数，那么就是从右边开始数，第N个分隔符右边的所有内容

mysql> select substring_index('aa.bb.cc','.',1);
　　-> 'aa'
mysql> select substring_index('aa.bb.cc','.',-2);
　　-> 'bb.cc'

locate(substr,str)
　返回字符串substr在字符串str第一次出现的位置(str不包含substr时返回0)

mysql> select LOCATE('bar', 'foobarbar');
　　-> 4
mysql> select LOCATE('xbar', 'foobar');
　　-> 0

locate(substr,str,pos)
　返回字符串substr在字符串str的第pos个位置起第一次出现的位置(str不包含substr时返回0)

mysql> select LOCATE('bar', 'foobarbar',5);
　　-> 7

instr(str,substr)
　返回字符串substr在字符串str第一次出现的位置(str不包含substr时返回0)

mysql> select INSTR('foobarbar', 'bar');
　　-> 4
mysql> select INSTR('xbar', 'foobar');
　　-> 0

lpad(str,len,padstr)
　用字符串padstr填补str左端直到字串长度为len并返回

mysql> select LPAD('hi',4,'??');
　　-> '??hi'

rpad(str,len,padstr)
　用字符串padstr填补str右端直到字串长度为len并返回

mysql> select RPAD('hi',5,'?');
　　-> 'hi???'

left(str,len)
　返回字符串str的左端len个字符

mysql> select LEFT('foobarbar', 5);
　　-> 'fooba'

right(str,len)
　返回字符串str的右端len个字符

mysql> select RIGHT('foobarbar', 4);
　　-> 'rbar'

substring(str,pos,len)
substring(str,pos)
　返回字符串str的位置pos起的一个子串

mysql> select SUBSTRING('Quadratically',5);
　　-> 'ratically'

ltrim(str)
　返回删除了左空格的字符串str

mysql> select LTRIM('  barbar');
　　-> 'barbar'

rtrim(str)
　返回删除了右空格的字符串str

mysql> select RTRIM('barbar   ');
　　-> 'barbar'

trim(str)
　返回删除了左右空格的字符串

mysql> select TRIM('  bar   ');
　　-> 'bar'

space(N)
　返回由N个空格字符组成的一个字符串

mysql> select SPACE(6);
　　-> '      '

replace(str,from_str,to_str)
　用字符串to_str替换字符串str中的子串from_str并返回

mysql> select REPLACE('www.mysql.com', 'w', 'Ww');
　　-> 'WwWwWw.mysql.com'

repeat(str,count)
　返回由count个字符串str连成的一个字符串(任何参数为NULL时返回NULL,count<=0时返回一个空字符串)

mysql> select REPEAT('MySQL', 3);
　　-> 'MySQLMySQLMySQL'

reverse(str)
　颠倒字符串str的字符顺序并返回

mysql> select REVERSE('abc');
　　-> 'cba'

field(str,str1,str2,str3,...)
　返回str等于其后的第N个字符串的序号(如果str没找到返回0)

mysql> select FIELD('ej', 'Hej', 'ej', 'Heja', 'hej','foo');
　　-> 2
mysql> select FIELD('fo', 'Hej', 'ej', 'Heja', 'hej','foo');
　　-> 0

find_in_set(str,strlist)
　返回str在字符串集strlist中的序号(任何参数是NULL则返回NULL,如果str没找到返回0,参数1包含","时工作异常)

mysql> SELECT FIND_IN_SET('b','a,b,c,d');
　　-> 2

lcase(str)
lower(str)
　返回小写的字符串str

mysql> select LCASE('QUADRATICALLY');
　　-> 'quadratically'

ucase(str)
upper(str)
　返回大写的字符串str

mysql> select UCASE('quadratically');
　　-> 'QUADRATICALLY'

hex(n)
   把n转为十六进制并以字串返回(n是bigint数字,等价于conv(n,10,16))
mysql> select hex(255);
　　-> 'ff'

insert(str,pos,len,newstr)
    把字符串str由位置pos起len个字符长的子串替换为字符串newstr并返回
mysql> select insert('quadratic', 3, 4, 'what');
　　-> 'quwhattic'

elt(n,str1,str2,str3,...)
    返回第n个字符串(n小于1或大于参数个数返回null)
mysql> select elt(1, 'ej', 'heja', 'hej', 'foo');
　　-> 'ej'

load_file(file_name)
    读入文件并且作为一个字符串返回文件内容(文件无法找到,路径不完整,没有权限,长度大于max_allowed_packet会返回null)
mysql> update table_name set blob_column=load_file("/tmp/picture") where id=1;

-------------------------------------

数学函数
---------------------------

abs(N)
　返回N的绝对值

mysql> select ABS(2);
　　-> 2
mysql> select ABS(-32);
　　-> 32

sign(N)
　返回参数的符号(为-1、0或1)

mysql> select SIGN(-32);
　　-> -1
mysql> select SIGN(0);
　　-> 0
mysql> select SIGN(234);
　　-> 1

mod(N,M)
　取模运算,返回N被M除的余数(同%操作符)

mysql> select MOD(234, 10);
　　-> 4
mysql> select 234 % 10;
　　-> 4
mysql> select MOD(29,9);
　　-> 2

floor(N)
　返回不大于N的最大整数值

mysql> select FLOOR(1.23);
　　-> 1
mysql> select FLOOR(-1.23);
　　-> -2

ceiling(N)
　返回不小于N的最小整数值
mysql> select CEILING(1.23);
　　-> 2
mysql> select CEILING(-1.23);
　　-> -1

round(N,D)
　返回N的四舍五入值,保留D位小数(D的默认值为0)

mysql> select ROUND(-1.23);
　　-> -1
mysql> select ROUND(-1.58);
　　-> -2
mysql> select ROUND(1.58);
　　-> 2
mysql> select ROUND(1.298, 1);
　　-> 1.3
mysql> select ROUND(1.298, 0);
　　-> 1

exp(N)
　返回值e的N次方(自然对数的底)

mysql> select EXP(2);
　　-> 7.389056
mysql> select EXP(-2);
　　-> 0.135335

log(N)
　返回N的自然对数

mysql> select LOG(2);
　　-> 0.693147
mysql> select LOG(-2);
　　-> NULL

LOG10(N)
　返回N以10为底的对数

mysql> select LOG10(2);
　　-> 0.301030
mysql> select LOG10(100);
　　-> 2.000000
mysql> select LOG10(-100);
　　-> NULL

POW(X,Y)
POWER(X,Y)
　返回值X的Y次幂

mysql> select POW(2,2);
　　-> 4.000000
mysql> select POW(2,-2);
　　-> 0.250000

sqrt(N)
　返回非负数N的平方根

mysql> select SQRT(4);
　　-> 2.000000
mysql> select SQRT(20);
　　-> 4.472136

PI()
　返回圆周率

mysql> select PI();
　　-> 3.141593

rand()
rand(N)
　返回在范围0到1.0内的随机浮点值(可以使用数字N作为初始值)

mysql> select RAND();
　　-> 0.5925
mysql> select RAND(20);
　　-> 0.1811
mysql> select RAND(20);
　　-> 0.1811
mysql> select RAND();
　　-> 0.2079
mysql> select RAND();
　　-> 0.7888

truncate(N,D)
　保留数字N的D位小数并返回
mysql> select TRUNCATE(1.223,1);
　　-> 1.2
mysql> select TRUNCATE(1.999,1);
　　-> 1.9
mysql> select TRUNCATE(1.999,0);
　　-> 1

LEAST(X,Y,...)
　返回最小值(如果返回值被用在整数(实数或大小敏感字串)上下文或所有参数都是整数(实数或大小敏感字串)则他们作为整数(实
  数或大小敏感字串)比较,否则按忽略大小写的字符串被比较)

mysql> select LEAST(2,0);
　　-> 0
mysql> select LEAST(34.0,3.0,5.0,767.0);
　　-> 3.0
mysql> select LEAST("B","A","C");
　　-> "A"

GREATEST(X,Y,...)
　返回最大值(其余同LEAST())

mysql> select GREATEST(2,0);
　　-> 2
mysql> select GREATEST(34.0,3.0,5.0,767.0);
　　-> 767.0
mysql> select GREATEST("B","A","C");
　　-> "C"

---------------------------------------

时期时间函数
--------------------

Date(date)
  返回日期 yyyy-MM-dd格式

mysql> select date('2015-11-10 00:00:00')
    -> 2015-11-10

DAYOFWEEK(date)
　返回日期date是星期几(1=星期天,2=星期一,……7=星期六,ODBC标准)

mysql> select DAYOFWEEK('1998-02-03');
　　-> 3

WEEKDAY(date)
　返回日期date是星期几(0=星期一,1=星期二,……6= 星期天)

mysql> select WEEKDAY('1997-10-04 22:23:00');
　　-> 5
mysql> select WEEKDAY('1997-11-05');
　　-> 2

DAYOFMONTH(date)
　返回date是一月中的第几日(在1到31范围内)

mysql> select DAYOFMONTH('1998-02-03');
　　-> 3

DAYOFYEAR(date)
　返回date是一年中的第几日(在1到366范围内)

mysql> select DAYOFYEAR('1998-02-03');
　　-> 34

MONTH(date)
　返回date中的月份数值

mysql> select MONTH('1998-02-03');
　　-> 2

QUARTER(date)
　返回date是一年的第几个季度

mysql> select QUARTER('98-04-01');
　　-> 2

YEAR(date)
　返回date的年份(范围在1000到9999)

mysql> select YEAR('98-02-03');
　　-> 1998

HOUR(time)
　返回time的小时数(范围是0到23)

mysql> select HOUR('10:05:03');
　　-> 10

MINUTE(time)
　返回time的分钟数(范围是0到59)

mysql> select MINUTE('98-02-03 10:05:03');
　　-> 5

SECOND(time)
　返回time的秒数(范围是0到59)

mysql> select SECOND('10:05:03');
　　-> 3

DATE_FORMAT(date,format)
　根据format字符串格式化date值

mysql> select DATE_FORMAT('1997-10-04 22:23:00','%H:%i:%s');
　　-> '22:23:00'

CURDATE()
CURRENT_DATE()
　以'YYYY-MM-DD'或YYYYMMDD格式返回当前日期值(根据返回值所处上下文是字符串或数字)

mysql> select CURDATE();
　　-> '2012-12-15'
mysql> select CURDATE() + 0;
　　-> 20121215

CURTIME()
CURRENT_TIME()
　以'HH:MM:SS'或HHMMSS格式返回当前时间值(根据返回值所处上下文是字符串或数字)

mysql> select CURTIME();
　　-> '23:50:26'
mysql> select CURTIME() + 0;
　　-> 235026

NOW()
SYSDATE()
CURRENT_TIMESTAMP()
　以'YYYY-MM-DD HH:MM:SS'或YYYYMMDDHHMMSS格式返回当前日期时间(根据返回值所处上下文是字符串或数字)

mysql> select NOW();
　　-> '2012-12-15 23:50:26'
mysql> select NOW() + 0;
　　-> 20121215235026

UNIX_TIMESTAMP()
UNIX_TIMESTAMP(date)
　返回一个Unix时间戳(从'1970-01-01 00:00:00'GMT开始的秒数,date默认值为当前时间)

mysql> select UNIX_TIMESTAMP();
　　-> 1436714780
mysql> select UNIX_TIMESTAMP('1997-10-04 22:23:00');
　　-> 875974980

FROM_UNIXTIME(unix_timestamp)
　以'YYYY-MM-DD HH:MM:SS'或YYYYMMDDHHMMSS格式返回时间戳的值(根据返回值所处上下文是字符串或数字)

mysql> select FROM_UNIXTIME(875996580);
　　-> '1997-10-05 04:23:00'
mysql> select FROM_UNIXTIME(875996580) + 0;
　　-> 19971005042300

FROM_UNIXTIME(unix_timestamp,format)
　以format字符串格式返回时间戳的值

mysql> select FROM_UNIXTIME(UNIX_TIMESTAMP(),'%Y %D %M %h:%i:%s %x');
　　-> '1997 23rd December 03:43:30 x'

TIMESTAMPDIFF(interval,datetime_expr1,datetime_expr2)
  计算两个日期的时间差，返回日期或日期时间表达式datetime_expr1 和datetime_expr2the 之间的整数差。
  其结果的单位由interval 参数给出。
  interval可是：
  SECOND 秒 SECONDS
  MINUTE 分钟 MINUTES
  HOUR 时间 HOURS
  DAY 天 DAYS
  MONTH 月 MONTHS
  YEAR 年 YEARS

mysql> select TIMESTAMPDIFF(minute,'2015-10-05 00:00:00','2015-10-06 00:00:00')
　　-> 1440
str_to_date(datatime,format)
  字符串转成日期
mysql> select str_to_date('2015-09-30','%Y-%m-%d')
    -> 2015-09-30

DATE_ADD(date,INTERVAL expr type)
   向日期添加指定的时间间隔,date 参数是合法的日期表达式,expr 参数是您希望添加的时间间隔
mysql> SELECT DATE_ADD(str_to_date('2015-09-30 16:18:32','%Y-%m-%d %H:%i:%s'),INTERVAL -1 DAY) as date
    -> 2015-09-29 16:18:32


DATE_SUB(date,INTERVAL expr type)
   向日期减少指定的时间间隔,date 参数是合法的日期表达式,expr 参数是您希望减少的时间间隔
mysql> SELECT DATE_SUB(str_to_date('2015-09-30 16:18:32','%Y-%m-%d %H:%i:%s'),INTERVAL 1 DAY) as date
    -> 2015-09-29 16:18:32

format字符串中可用标志符:
　%M 月名字(January……December)
　%W 星期名字(Sunday……Saturday)
　%D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）
　%Y 年, 数字, 4 位
　%y 年, 数字, 2 位
　%a 缩写的星期名字(Sun……Sat)
　%d 月份中的天数, 数字(00……31)
　%e 月份中的天数, 数字(0……31)
　%m 月, 数字(01……12)
　%c 月, 数字(1……12)
　%b 缩写的月份名字(Jan……Dec)
　%j 一年中的天数(001……366)
　%H 小时(00……23)
　%k 小时(0……23)
　%h 小时(01……12)
　%I 小时(01……12)
　%l 小时(1……12)
　%i 分钟, 数字(00……59)
　%r 时间,12 小时(hh:mm:ss [AP]M)
　%T 时间,24 小时(hh:mm:ss)
　%S 秒(00……59)
　%s 秒(00……59)
　%p AM或PM
　%w 一个星期中的天数(0=Sunday ……6=Saturday ）
　%U 星期(0……52), 这里星期天是星期的第一天
　%u 星期(0……52), 这里星期一是星期的第一天
　%% 字符%
------------------------------------------

转换函数
------------------------

cast
用法：cast(字段 as 数据类型) [当然是否可以成功转换，还要看数据类型强制转化时注意的问题]
实例：select cast(a as unsigned) as b from cardserver;

convert：
用法：convert(字段,数据类型)
实例：select convert(a ,unsigned) as b from cardserver;

数据类型如下:
字符型,可带参数 : CHAR()
日期 : DATE
时间: TIME
日期时间型 : DATETIME
浮点数 : DECIMAL
整数 : SIGNED
无符号整数 : UNSIGNED
-------------------------------------
加解密函数
md5(str)    md5加密
    select md5("hello")
sha(str)    sha加密
    select sha("hello")
sha1(str)   sha1加密
    select sha("hello")
encode(str,key)    使用key作为密钥加密字符串str
decode(str,key)    使用key作为密钥解密字符串str
    select decode(encode("hello","password"),"password")
aes_encrypt(str,key)  返回用密钥key对字符串str利用高级加密标准算法加密后的结果，结果是一个二进制字符串，以BLOB类型存储
aes_decrypt(str,key)  返回用密钥key对字符串str利用高级加密标准算法解密后的结果
encrypt(str,salt)     使用UNIXcrypt()函数，用关键词salt加密字符串str
password(str)         返回字符串str的加密版本，这个加密过程是不可逆转的
---------------------mysql自定义函数---------------------------------
CREATE FUNCTION hello (s CHAR(20)) RETURNS CHAR(50)
RETURN CONCAT('Hello, ',s,'!');

mysql> SELECT hello('world');
-----------------------------------------------
