--------------------------------mysql主从-----------------------------
说明:mysql 5.1.7后 不支持直接在配置文件配主从配置,也就是master-host这样的配置不支持了，第一次同步需要手动同步
#从库
change master to master_user='slave',master_password='123456',
master_host='127.0.0.1',master_port=3306,master_log_file='mysql-bin.000005',master_log_pos=1592;

start slave;//开始主从复制
show slave status;//查看主从复制状态

说明：由于MySQL不同版本之间的(二进制日志)binlog格式可能会不一样，
因此最好的搭配组合是Master的MySQL版本和Slave的版本相同或者更低，Master的版本肯定不能高于Slave版本。（版本向下兼容）
以下配置主从基于mysql5.0

mysql1  : 127.0.0.1    //master
mysql2  : 127.0.0.1   //slave

安装步骤 
1. 分别在两台机器上安装mysql-server
shell > apt-get install mysql-server

2.修改 mysql1 master 的配置文件
vim /etc/mysql/my.cnf
找到 bind-address = 127.0.0.1
改为 bind-address = 0.0.0.0

server-id               = 1
log_bin                 = /var/log/mysql/mysql-bin.log
default-character-set   = utf8

3.建立一个slave服务器的用户账号

root@msyql1:/# mysql -uroot -p
mysql >  grant replication slave on *.* to slave@127.0.0.1 identified by '12345678';     //给予权限


4.修改 mysql2 服务器slave的 my.cnf配置文件
找到 bind-address            = 127.0.0.1
替换 bind-address            = 0.0.0.0

port                    =3307
server-id               = 2
master-host             = 127.0.0.1
master-user             = slave
master-password         = ******
master-port             = 3306
log_bin                 = /var/log/mysql/mysql-bin.log
log-slave-updates
skip-slave-start

//add
master-connect-retry=60 #如果从服务器发现主服务器断掉，重新连接的时间差(秒)
replicate-do-db =test #只复制某个库
replicate-do-db =test2 #复制多个库,每个库必须单独一行配置
replicate-ignore-db=mysql #不复制某个库
配置完后 重新启动mysql

5,进入mysql1 master 服务器
mysql> show master status;

6,记录下来以后 进入 mysql2 slave mysql
root@msyql2:~# mysql -uroot -p -P3307

mysql>  change master to master_log_file='mysql-bin.000009', master_log_pos=106;
//这个地方就是记录下来的 mysql1 master 的数据***********************************
mysql > start slave;  //启动slave 服务

mysql > show slave status\G
*************************** 1. row ***************************
               Slave_IO_State:
                  Master_Host: 129.1.23.8
                  Master_User: sx
                  Master_Port: 3306
                Connect_Retry: 60
              Master_Log_File: mysql-bin.000001
          Read_Master_Log_Pos: 884
               Relay_Log_File: mysqld-relay-bin.000001
                Relay_Log_Pos: 4
        Relay_Master_Log_File: mysql-bin.000001
             Slave_IO_Running: No
            Slave_SQL_Running: Yes
              Replicate_Do_DB:
          Replicate_Ignore_DB:
           Replicate_Do_Table:
       Replicate_Ignore_Table:
      Replicate_Wild_Do_Table:
  Replicate_Wild_Ignore_Table:
                   Last_Errno: 0
                   Last_Error:
                 Skip_Counter: 0
          Exec_Master_Log_Pos: 884
              Relay_Log_Space: 106
              Until_Condition: None
               Until_Log_File:
                Until_Log_Pos: 0
           Master_SSL_Allowed: No
           Master_SSL_CA_File:
           Master_SSL_CA_Path:
              Master_SSL_Cert:
            Master_SSL_Cipher:
               Master_SSL_Key:
        Seconds_Behind_Master: NULL
Master_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error:
               Last_SQL_Errno: 0
               Last_SQL_Error:
1 row in set (0.00 sec)

这一块有一个错误： Slave_IO_Running: No
			       Slave_SQL_Running: Yes

正常的话，应该是这样的：
				Slave_IO_Running: Yes
				Slave_SQL_Running: Yes

Slave_IO_Running: No
解决办法： 先stop slave 再reset slave再start slave就正常了。

Slave_SQL_Running: No
解决办法：
1.首先停掉Slave服务：stop slave;
2.到主服务器上查看主机状态：记录File和Position对应的值。
3.到slave服务器上执行手动同步：
change master to master_host='127.0.0.1', master_user='slave', master_password='12345678', master_port=3306, master_log_file='mysql-bin.000013', master_log_pos=106;
start slave;
show slave status\G;

mysql主从同步原理
主库针对写操作，顺序写binlog，从库单线程去主库顺序读”写操作的binlog”，从库取到binlog在本地原样执行（随机写），来保证主从数据逻辑上一致。
mysql的主从复制都是单线程的操作，主库对所有DDL和DML产生binlog，binlog是顺序写，所以效率很高，slave的Slave_IO_Running线程到主库取日志，效率比较高，
slave的Slave_SQL_Running线程将主库的DDL和DML操作在slave实施。DML和DDL的IO操作是随即的，不是顺序的，成本高很多。
mysql主从复制实基于binlog二进制日志，大致过程如下:
1. 主库对所有DDL和DML产生的日志写进binlog；
2. 主库生成一个 log dump 线程，用来给从库I/O线程读取binlog；
3. 从库的I/O Thread去请求主库的binlog，并将得到的binlog日志写到中继日志relay log文件中；
4. 从库的SQL Thread会读取relay log文件中的日志解析成具体操作，将主库的DDL和DML操作事件重放。

mysql数据库主从同步延迟的产生
当主库的TPS并发较高时，产生的DDL数量超过slave一个sql线程所能承受的范围，那么延时就产生了，当然还有就是可能与slave的大型query语句产生了锁等待。
首要原因：数据库在业务上读写压力太大，CPU计算负荷大，网卡负荷大，硬盘随机IO太高
次要原因：读写binlog带来的性能影响，网络传输延迟。

mysql数据库主从同步延迟解决方案
1,slave端,直接关闭slave端的binlog,设置sync_binlog=0,innodb_flush_log_at_trx_commit =2
2,master端,主库是写,如果对数据安全性较高,sync_binlog=1,innodb_flush_log_at_trx_commit = 1 之类的设置是需要的,
但可根据实际情况调整innodb_flush_log_at_trx_commit=2
3,系统层面，根据请求修改linux文件系统中文件的etime属性， 由于每当读文件时os都会将读取操作发生的时间回写到磁盘上，对于读操作频繁的数据库文件来说这是没必要的，
只会增加磁盘系统的负担影响I/O性能。可以通过设置文件系统的mount属性，组织操作系统写atime信息，
在linux上的操作为：
vim /etc/fstab
  /dev/sdb1 /data reiserfs noatime 1 2    ###加上noatime参数
然后重新mount文件系统
mount -oremount /data

备注:
sync_binlog参数配置的说明参看"mysql二进制文件.txt"
innodb_flush_log_at_trx_commit参数配置的说明参看"mysql-innodb存储引擎.txt"
--------------------------------------------------------------------------
