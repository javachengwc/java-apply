-------------------------mysql-binlog-------------------
二进制文件的主要作用:
1,恢复 recovery。某些数据的恢复需要二进制日志，在全库文件恢复后，可以在此基础上通过二进制日志进行point-to-time的恢复。
2,复制（replication）。其原理和恢复类似，通过复制和执行二进制日志使得一台远程的mysql数据库（slave）于一台mysql数据库（master）进行实时同步。

--二进制文件的查看
mysql> show binlog events in 'mysql-bin.000002'
mysqlbinlog mysql_bin.000001
mysqlbinlog D:\mysqlquery\mysql-bin.000005 > D:\log.txt  报错的话，可用
mysqlbinlog --no-defaults D:\mysqlquery\mysql-bin.000005 > D:\log.txt 试一下
mysqlbinlog -v --base64-output=decode-rows mysql-bin.000689 > 689.log    ###阿里云rds中的二进制日志转换

--根据二进制文件恢复误删除数据
--根据操作点恢复
mysqlbinlog --start-position=2568 --stop-position=2703 D:\mysqlquery\mysql-bin.000005 |mysql -uroot -proot
--根据时间恢复
mysqlbinlog --start-date="2015-01-01 00:00:00" --stop-date="2015-01-31 00:00:00" D:\mysqlquery\mysql-bin.000005|mysql -uroot -proot

mysqlbinlog 命令格式：
mysqlbinlog binlog_file1 binlog_file2 ... binlog_filen --start-position=xxxx  --stop-datetime="YY-mm-dd hh:mm:ss" | mysql -uroot -pyour_password -Pmysql_port -hyour_host_ip
比如多二进制文件恢复:mysqlbinlog mysql-bin.000688 mysql-bin.000689 --start-position=531167  --stop-datetime="16-05-16 18:05:03" | mysql -uroot -pyour_password -P3306 -hyour_host_ip
# -p 参数和 your_password 间不要有空格
# --database db_name 指定仅增量恢复指定数据库 db_name 的数据
# --start-position 指定开始恢复的 binlog 位点，该位点应存在于指定的第一个 binlog 文件。
# --stop-position 指定恢复到的 binlog 位点，该位点应存在于指定的最后一个 binlog 文件。
# --start-datetime 指定开始恢复的时间点（从第一个等于或大于该时间点的 binlog 事件开始）。
# 以本地时间时区为准，格式为 MySQL 可以接受的时间格式，比如"2016-05-16 08:01:05" 或 "16-05-16 08:01:05"。
# --stop-datetime 指定停止恢复的时间点（在第一个等于或大于该时间点的 binlog 事件停止）。
# 以本地时间时区为准，格式为 MySQL 可以接受的时间格式，比如"2016-05-16 08:01:05" 或 "16-05-16 08:01:05"。

二进制记录了对数据库执行更改的所有操作，但是不包括SELECT和SHOW操作，还包括了执行时间和更改操作时间。可用来恢复某些数据，同时也可以用来复制同步远程数据库。
binlog-format：日志格式，有statement、row、mixed格式。将binlog_format设置成row，可以支持事务隔离级别为READ COMMITTED，以获得更好的并发性。
在使用MIXED格式下，mysql采用STATEMENT格式进行二进制日志文件的记录，但是有一些情况下会使用ROW格式，可能的情况如下：
1、表的存储引擎为NDB，这个时候DML操作都会以ROW格式记录。
2、使用了uuid()、user(),current_user(),found_rows(),row_count(),等不确定函数。
3、使用了insert delay语句
4、使用了用户定于的函数(UDF)
5、使用了临时表(temporary table)
注意：针对系统库mysql里面的表发生变化的处理规则如下：
1、 如果采用insert，update，delete直接操作表，则日志根据binlog_format设定的格式记录。
2、 如果使用grant，revoke，set password等DCL语句，那么无论如何都会使用SBR模式记录。
3、 blockhole引擎不支持row格式，ndb引擎不支持statement格式。

binlog日志参数：
max_binlog_size：指定了单个二进制文件的最大值，如果超过了该值，就会产生新的日志文件，后缀名+1，并且记录到.index文件里面。默认值是1G，一般64M是通用的大小设置。
binlog_cache_size：使用innodb存储引擎时候，所有未提交uncommitted的二进制日志会被记录到一个缓存中，等该事务提交时committed直接将缓冲中的二进制日志写入二进制日志文件里面，
    而该缓冲的大小就由binlog_cache_size来决定，这个缓冲区是基于session的，也就是每一个线程需要事务的时候，mysql都会分配一个binlog_cache_size的缓存，
    因此改值设置需要非常小心，不能设置过大，免得内存溢出了。
sync_binlog：sync_binlog参数来控制数据库的binlog刷到磁盘上去,默认为0，
    sync_binlog=0，表示mysql不控制binlog的刷新，由文件系统自己控制它的缓存的刷新。这时性能是最好的，但风险也是最大的。一旦系统Crash，在binlog_cache中的所有binlog信息都会被丢失。
    sync_binlog>0，每向二进制日志文件写入N条SQL或N个事务后，则把二进制日志文件的数据刷新到磁盘上；
    sync_binlog=1，表示每次事务提交，mysql都会把binlog刷下去，是最安全,但是性能损耗最大的设置。
         当sysnc_binlog=1，还有一个参数需要设置。innodb_support_xa也需要将该值设置为1.避免事务不能被回滚的问题。
         在数据库所在的主机操作系统损坏或者突然掉电的情况下，系统才有可能丢失1个事务的数据。
         binlog虽然是顺序IO，但是设置sync_binlog=1，多个事务同时提交，同样可能影响mysql和io性能。
         所以很多mysql设置的sync_binlog并不是1，而是2或者是0。这样牺牲一定的一致性，可以获得更高的并发和性能。
binlog-do-db、binlog-ingore-db：表示需要写入或者忽略写入哪些库的日志，默认为空，表示可以将所有库的日志写入到二进制文件里面。
log-slave-update：启用从机服务器上的slave日志功能，使这台计算机可以用来构成一个镜像链(A->B->C) ，可以让从库上面产生二进制日志文件，在从库上再挂载一个从库。
binlog-format：日志格式，有statement、row、mixed格式
    Statement：每一条会修改数据的sql都会记录在binlog中。
        优点：不需要记录每一行的变化，减少了binlog日志量，节约了IO，提高性能。
        缺点：由于记录的只是执行语句，为了这些语句能在slave上正确运行，因此还必须记录每条语句在执行的时候的一些相关信息，以保证所有语句能在slave得到和在master端执行时候相同的结果。另外mysql 的复制,像一些特定函数功能，slave可与master上要保持一致会有很多相关问题(如sleep()函数，last_insert_id()，以及user-definedfunctions(udf)会出现问题).
    Row:不记录sql语句上下文相关信息，仅保存哪条记录被修改。
        优点： binlog中可以不记录执行的sql语句的上下文相关的信息，仅需要记录那一条记录被修改成什么了。
             所以row level的日志内容会非常清楚的记录下每一行数据修改的细节。而且不会出现某些特定情况下的存储过程，或function，以及trigger的调用和触发无法被正确复制的问题
        缺点:所有的执行的语句当记录到日志中的时候，都将以每行记录的修改来记录，这样可能会产生大量的日志内容,
             比如一条update语句，修改多条记录，则binlog中每一条修改都会有记录，这样造成binlog日志量会很大，
             特别是当执行alter table之类的语句的时候，由于表结构修改，每条记录都发生改变，那么该表每一条记录都会记录到日志中。
             新版本的MySQL中队row level模式也被做了优化，并不是所有的修改都会以row level来记录，像遇到表结构变更的时候就会以statement模式来记录。
             至于update或者delete等修改数据的语句，还是会记录所有行的变更。
    Mixed:是以上两种level的混合使用，一般的语句修改使用statment格式保存binlog，如一些函数，statement无法完成主从复制的操作，则采用row格式保存binlog,
          MySQL会根据执行的每一条具体的sql语句来区分对待记录的日志形式，也就是在Statement和Row之间选择一种

使用以下函数的语句也无法被复制：
*LOAD_FILE()
*UUID()
*USER()
*FOUND_ROWS()
*SYSDATE() (除非启动时启用了--sysdate-is-now 选项)
同时在INSERT ...SELECT 会产生比 RBR 更多的行级锁

备注:通常在数据库第一次打开二进制日志记录的时候，会对数据库做一个全备份，导入到一个备份数据库中。
当后面因为误删表或则误操作需要恢复到错误之前的那个点的时候，如果直接在当前数据库上通过二进制日志恢复，
很容易导致之前增改的操作重复执行，这样恢复是有问题的。
正确的做法是通过备份数据库从最开始的那个起点通过二进制日志恢复到误操作之前的那个点，
这样恢复的数据才是准确的误操作之前的那个状态的数据。

-------------------------------------------------------