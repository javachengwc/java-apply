-----------------------常用mysql脚本--------------------------

----------------表相关------------------
-- 建表
create table monit_image
(
    id int AUTO_INCREMENT comment '自增长id',
    user_name varchar(50) comment '用户名',
    machine_name varchar(50) comment '电脑名',
    record_time TIMESTAMP  comment '记录时间',
    file_name varchar(50)  comment '文件名',
    path   varchar(100) comment '文件路径',
    file_size decimal(8,2) comment '文件大小',
    PRIMARY KEY (id),
    key user_name(user_name),
    key machine_name(machine_name)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 comment '监控截图记录表';

常用存储引擎：MyISAM（非事务的，查询速度较InnoDB快）、InnoDB（事务，适合处理多重并发的更新请求）

-- 修改表名称
alter table users rename to ecs_users;

-- 修改视图名称
rename table xx to yy;

-- 删除表
drop table account_info2

-- 创建临时表
create temporary table tmp_table
(    name varchar(10) not null,
     passwd char(6) not null
);

-- 清除数据
truncate table tmp_table;

delete from tablea & truncate table tablea的区别
　　truncate 语句执行速度快,占资源少,并且只记录页删除的日志,不能通过二进制日志恢复
　　delete 对每条记录的删除均需要记录日志

-------列相关--------

-- 增加列
alter table users add column address2 varchar(60) comment '地址',add column note varchar(60) comment '备注';

-- 指定列后面增加
alter table users add column address3 varchar(60) comment '地址' after address2

-- 删除列
alter table users drop column note

--修改列名称
alter table ecs_users change address3 address_after  varchar(60)

--修改列属性
alter table ecs_users modify education tinyint(1);

--修改自动更新时间为当前时间
alter table ecs_users add column update_time TIMESTAMP default CURRENT_TIMESTAMP() on update CURRENT_TIMESTAMP;

--------索引相关-------

-- 增加主键
alter table test add primary key (user_id)

-- 增加唯一键
alter table test add unique (user_name)

-- 增加普通索引
alter table test add index address (address)

-- 增加多列索引
alter table test add index combin_index_name(column1,column2,column3)

--删除索引
drop index address on test
alter table test drop index address
alter table table_name drop primary key

----------------------增删改--------------------------------
-----insert 操作-----
insert ignore into ......  忽略数据库中已经存在的数据，如果数据库没有数据则插入新的数据，如果有数据则跳过这条数据
insert into  ......
replace into ...... 如果存在primary or unique相同的记录 则先删除在执行插入操作

----update操作------

--单表
update persondata set age=age+1;

--多表
update items,month set items.price=month.price where items.id=month.id

--多表
update goods a
join goods_act b on a.goods_id=b.goods_id
join act c on b.act_id=c.act_id
set a.discount=if(b.privilege_price<>0,b.privilege_price,0)
where c.is_finished=0

update a
left join b on a.id=b.aid
left join c on  a.id=c.aid
set a.vlu=if(b.vlu is null,0,b.vlu)+if(c.vlu is null,0,c.vlu)
where a.id in (1,2,3)

------delete 操作------

-----mysql连表删数据

1,从数据表a中把那些id值在数据表b里有匹配的记录删除
delete a from a,b where a.id=b.aid

2,从数据表a中把在数据表b里没有匹配的记录删除
delete a from a left join b on a.id=b.aid where b.aid is null

3,从两个表中找出相同记录的数据并把两个表中的数据都删除掉

delete a,b from a join b on a.id =b.aid

注:修改(增删改)一个表的时候，子查询不能是同一个表,否则会报1093错误，
解决办法：把子查询再套一层，变成原来表的子子查询即可。
ep:
delete from seller_part where seller_id in (
    select a.seller_id from seller_part  a
    where EXISTS (select 1 from  product b where b.seller_id=a.seller_id and  b.state=2 )
)  //此语句将报错1093 - You can't specify target table 'shop_seller_part' for update in FROM clause。
delete from seller_part   where seller_id in (
    select y.* from (
        select a.seller_id from seller_part  a
        where EXISTS (select 1 from  product b where b.seller_id=a.seller_id and  b.state=2 )
     ) y
 ) //对子查询多套一层，执行正确。

---查询结果集放入临时表
 create table t_temp as select .......

----------------------复杂查询------------------------------
select a.*,b.name as style_name,c.name as price_interval_name,d.name as house_type_name ,d.type as house_type ,
REPLACE(GROUP_CONCAT(eas.space_name SEPARATOR ';'),';',' ') as space_name ,
REPLACE(GROUP_CONCAT(cast(eas.space_id as char)),',',' ') as space_ids,
SUBSTRING_INDEX(GROUP_CONCAT(keting.space_img),',',1) img
from house_suit a
    left join ad_type  b on a.suit_style =b.id  and  b.priv_code = 'act'
    left join ad_type  c on a.suit_price_interval = c.id  and c.priv_code = 'act'
    left join ad_type  d on a.suit_house_type = d.id  and d.priv_code = 'act'
    left join suit_space eass on eass.suit_id=a.suit_id
    left join house_space eas on eass.space_id=eas.space_id
    left join (select a.* from house_space a where a.space_type =
              (select id from ad_type where  priv_code = 'act' and ad_code = 'keting')) keting
         on keting.space_id=eass.space_id
group by a.suit_id
------------------------

select a.ids ,a.award_condition,c.allmount,a.goods_name,b.id as prize_id,FIND_IN_SET(b.award_id,a.ids) as pos
from (select act_id,goods_id ,goods_name ,award_condition,CAST(REPLACE(GROUP_CONCAT(id),',',',') as char) as ids from  activity_award group by goods_id) a
left join activity_collect c on a.act_id = c.act_id
left join activity_gain b on FIND_IN_SET(b.award_id,a.ids)>0 and b.collect_id =c.id
where c.id = 21
order by a.award_condition desc
---------------------------

select product_id,sum(sale_after_count) as sale_after_count,sum(seller_reason_count) as seller_reason_count,
       cast( if(sum(after_first_count)<=0,0,sum(after_first_sum)/sum(after_first_count)) as unsigned ) as sale_first_deal_period,
			 cast( if(sum(before_deal_count)<=0,0,sum(before_deal_sum)/sum(before_deal_count)) as unsigned ) as delive_pre_refund_period,
       cast( if(sum(after_deal_count)<=0,0,sum(after_deal_sum)/sum(after_deal_count)) as unsigned ) as delive_after_refund_period,
			 cast( if(sum(sales_deal_count)<=0,0,sum(sales_deal_sum)/sum(sales_deal_count)) as unsigned ) as refund_goods_period,
       sum(complain_count) as safeguard_rights_count,
       cast( if(sum(complain_first_count)<=0,0,sum(complain_first_sum)/sum(complain_first_count)) as unsigned ) as safeguard_first_deal_period,
			 cast( if(sum(complain_first_count)<=0,0,sum(complain_first_sum)/sum(complain_first_count)) as unsigned ) as safeguard_deal_period
 from goods_sale_afte group by product_id

------------------------------------------------------