-------------------------------------mysql慢查询分析优化--------------------------------------
mysql慢查询分析以及性能瓶颈定位
通过show命令查看mysql状态及变量，看是否能找到系统的瓶颈
show status           -----显示状态信息（扩展show status like 'xxx'）
show variables        -----显示系统变量（扩展show variables like 'xxx'）
show innodb status    -----显示InnoDB存储引擎的状态
show processlist      -----查看当前SQL执行，包括执行状态、是否锁表等
mysqladmin variables -u username -p password       -----显示系统变量
mysqladmin extended-status -u username -p password -----显示状态信息
mysqld –verbose –help                            ------查看状态变量及帮助

慢查询分析mysqldumpslow
mysqldumpslow -s c -t 10 /database/mysql/slow-query.log   #输出记录次数最多的10条SQL语句。
-s, 是表示按照何种方式排序，c、t、l、r分别是按照记录次数、时间、查询时间、返回的记录数来排序，ac、at、al、ar，表示相应的倒叙；
-t, 是top n的意思，即为返回前面多少条的数据；
-g, 后边可以写一个正则匹配模式，大小写不敏感的；

explain分析查询
使用explain关键字可以模拟优化器执行SQL查询语句，从而知道mysql是如何处理sql语句的。可以帮助分析查询语句的性能瓶颈。
通过explain命令可以得到:
– 表的读取顺序，explain 返回结果中,语句的执行顺序，正确的方式是, 从id大的语句开始看, id相同的语句, 从上到下依次执行。大id的语句一般是子查询语句。
– 数据读取操作的操作类型
– 哪些索引可以使用
– 哪些索引被实际使用
– 表之间的引用
– 每张表有多少行被优化器查询
explain字段：
    table：显示这一行的数据是关于哪张表的
    possible_keys：显示可能应用在这张表中的索引。
    key：此次查询中确切使用到的索引，可以在select语句中使用use index(idx)来强制使用一个索引或者用ignore index(idx)来强制忽略索引。
    key_len：表示查询优化器使用了索引的字节数. 这个字段可以评估组合索引是否完全被使用, 或只有最左部分字段被使用到.
         key_len 的计算规则如下:
         char(n): n 字节长度
         varchar(n): 如果是 utf8 编码, 则是 3 n + 2字节; 如果是 utf8mb4 编码, 则是 4 n + 2 字节.
         TINYINT: 1字节
         SMALLINT: 2字节
         MEDIUMINT: 3字节
         INT: 4字节
         BIGINT: 8字节
         DATE: 3字节
         TIMESTAMP: 4字节
         DATETIME: 8字节
         字段属性: NULL 属性 占用一个字节. 如果一个字段是 NOT NULL 的, 则没有此属性.
    ref：哪个字段或常数与 key 一起被使用
    rows：显示此查询一共扫描了多少行. 这个是一个估计值
    filtered: 表示此查询条件所过滤的数据的百分比
    type：查询使用何种类型。ALL < index < range ~ index_merge < ref < eq_ref < const < system
          system、const：可以将查询的变量转为常量.  如id=1; id为 主键或唯一键.
          eq_ref：访问索引,返回某单一行的数据.(通常在联接时出现，查询使用的索引为主键或唯一键)
                  此类型通常出现在多表的 join 查询, 表示对于前表的每一个结果, 都只能匹配到后表的一行结果. 并且查询的比较操作通常是 =, 查询效率较高.
          ref：访问索引,返回某个值的数据.(可以返回多行) 通常使用=时发生
               此类型通常出现在多表的 join 查询, 针对于非唯一或非主键索引, 或者是使用了最左前缀规则索引的查询
          range：这个连接类型使用索引返回一个范围中的行，比如使用>或<查找东西，并且该字段上建有索引时发生的情况(注:不一定好于index)
          index：表示全索引扫描(full index scan), 和 ALL 类型类似, 只不过 ALL 类型是全表扫描, 而 index 类型则仅仅扫描所有的索引, 而不扫描数据.
                 index 类型通常出现在: 所要查询的数据直接在索引树中就可以获取到, 而不需要扫描数据. 当是这种情况时, Extra字段会显示Using index.
          ALL：全表扫描，应该尽量避免
    Extra：关于mysql如何解析查询的额外信息，主要有以下几种
          using index：只用到索引,可以避免访问表. 查询在索引树中就可查找所需数据, 不用扫描表数据文件, 往往说明性能不错。
          using where：使用到where来过虑数据. 不是所有的where clause都要显示using where. 如以=方式访问索引.
          using tmporary：用到临时表
          using filesort：用到额外的排序. (当使用order by v1,而没用到索引时,就会使用额外的排序)
          range checked for eache record(index map:N)：没有好的索引.
    select_type:表示了查询的类型, 它的常用取值有:
        SIMPLE, 表示此查询不包含 UNION 查询或子查询
        PRIMARY, 表示此查询是最外层的查询
        UNION, 表示此查询是 UNION 的第二或随后的查询
        DEPENDENT UNION, 表示此查询是UNION 中的第二个或后面的查询语句, 取决于外面的查询
        UNION RESULT, 表示此查询是UNION 的结果
        SUBQUERY, 表示此查询是子查询中的第一个 SELECT
        DEPENDENT SUBQUERY: 表示此查询是子查询中的第一个 SELECT, 取决于外面的查询. 即子查询依赖于外层查询的结果.
例子:
    explain
    select user.id, user.nickname from usergroup
    left join user  on usergroup.userid = user.Id
    where  usergroup.groupid = 1
    order by usergroup.UserId desc
    limit 100, 20;

    第一句结果
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    id    select_type    table     partitions     type    possible_keys     key               key_len    ref              rows    filtered      Extra
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    1     SIMPLE         usergroup                ref     index_userid      index_userid      5          const            1000    100           Using where;Using index
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    1     SIMPLE         user                     eq_ref  PRIMARY           PRIMARY           4          usergroup.userid 1       100
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------

    explain
    select user.id, user.nickname
    from (select id, userid from usergroup where groupid = 1 order by userid limit 100, 20) t
    left join  user on t.UserId = user.id ;

    第二句结果
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    id    select_type    table     partitions     type    possible_keys     key               key_len    ref              rows    filtered      Extra
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    1     PRIMARY       <derived2>                All                                                                     120     100
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    1     PRIMARY        user                     eq_ref  PRIMARY           PRIMARY           4          t.userid         1       100
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    2     DERIVED        usergroup                ref     index_userid      index_userid      5          const            1000    100           Using where;Using index
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------

    从上面执行计划得到的结论:
    1,explain 返回结果中,语句的执行顺序，正确的方式是, 从id大的语句开始看, id相同的语句, 从上到下依次执行。大id的语句一般是子查询语句。
    2,多表关联查询中，关联字段索引，只会是后表对应的此字段索引，跟前表有没有此字段索引没关系，比如上面的第一个查询关联left join user  on usergroup.userid = user.id
      这里的关联查询中关联字段索引只会是后表user的id主键索引，与usergroup的userid字段有没有索引没有关系。

对于多表关联的查询（INTER JOIN），mysql优化器会根据数据的选择性来重新决定关联的顺序，选择性高的会被置前。
如果关联设计到N张表，优化器会尝试N！种的关联顺序，从中选出一种最优的排列顺序，如果有10张表进行关联，就有3628800种排序的可能，优化器可能需要经过3628800次的尝试才能得到一个最优的顺序。
面对这种数量很大的排序任务，优化器并没有老老实实的尝试3628800次，而是当达到optimizer_search_depth指定的次数后，就会采用“贪婪模式”进行处理。这也表明关联表的数量不能太多。

profiling分析查询
通过慢日志查询可以知道哪些SQL语句执行效率低下，通过explain可以得知SQL语句的具体执行情况，索引使用等，还可以结合show命令查看执行状态。
如果觉得explain的信息不够详细，可以同通过profiling命令得到更准确的SQL执行消耗系统资源的信息。
mysql>select @@profiling      #查看profiling状态
mysql>set profiling=1; #打开profiling
mysql>select ......   #具体查询
mysql> show profiles\G; #显示被执行的sql语句的时间和ID
mysql>show profile for query 1;  #显示对应sql语句执行的详细信息
    status                  duration
    starting                0.000427
    checking permissions    5E-6                  =5*10^-6次方
    Opening tables          8.9E-5
    init                    0.000138
    System lock             3.7E-5
    optimizing              4.9E-5
    statistics              0.000731
    preparing               0.000106
    executing               1.4E-5
    Sending data            9.600897              ##收集 + 发送数据,此状态耗时很长一般是查询没命中索引
                                                  ##此状态是慢查询重点关注状态
    end                     4.7E-5
    query end               4.7E-5                ##语句执行完毕了，但是还有一些后续工作没做完时的状态
    closing tables          2.8E-5
    freeing items           0.000125              ##释放查询缓存里面的空间
    logging slow query      7.6E-5
    cleaning up             3.1E-5
mysql>show profile block io  for query 1;  #显示对应sql语句执行的io相关信息

show profile命令格式：
SHOW PROFILE [type [, type] … ]
    [FOR QUERY n]
    [LIMIT row_count [OFFSET offset]]
type:
    ALL| BLOCK IO| CONTEXT SWITCHES| CPU| IPC| MEMORY| PAGE FAULTS| SOURCE| SWAPS

索引优化
   见mysql索引优化.txt

配置优化
  max_connections
      show variables like ‘max_connections’ 最大连接数
      show  status like ‘max_used_connections’响应的连接数
      max_used_connections / max_connections * 100% （理想值≈85%）
  back_log
      mysql能暂存的连接数量。当mysql线程在一个很短时间内得到非常多的连接请求，这就起作用。如果MySQL的连接数据达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，
      该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源。
      当观察（mysql> show full processlist），发现大量| unauthenticated user | xxx.xxx.xxx.xxx | NULL | Connect | NULL | login | NULL 的待连接时，就要加大back_log 的值了。
      默认数值是50，可调优为128，对于Linux系统设置范围为小于512的整数。
  interactive_timeout
      一个交互连接在被服务器在关闭前等待行动的秒数。
  key_buffer_size
      key_buffer_size指定索引缓冲区的大小，它决定索引处理的速度，尤其是索引读的速度。key_reads / key_read_requests应该尽可能的低，至少是1:100，1:1000更好。
      key_buffer_size只对MyISAM表起作用。即使不使用MyISAM表，但是内部的临时磁盘表是MyISAM表，也要使用该值。可以使用检查状态值created_tmp_disk_tables得知详情。
  query_cache_size
      使用查询缓冲，mysql将查询结果存放在缓冲区中，今后对于同样的select语句（区分大小写），将直接从缓冲区中读取结果。
  record_buffer_size
      每个进行一个顺序扫描的线程为其扫描的每张表分配这个大小的一个缓冲区。如果是做很多顺序扫描，可以增加该值。
  read_rnd_buffer_size
      随机读缓冲区大小。mysql会为每个连接发放该缓冲空间。当按任意顺序读取行时将分配一个随机读缓存区。进行排序查询时，mysql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度。
  sort_buffer_size
      每个需要进行排序的线程分配该大小的一个缓冲区。加速ORDER BY或GROUP BY操作。
  join_buffer_size
      联合查询操作所能使用的缓冲区大小
  table_cache
      表高速缓存的大小。每当mysql访问一个表时，如果在表缓冲区中还有空间，该表就被打开并放入其中，这样可以更快地访问表内容。
  max_heap_table_size
      用户可以创建的内存表(memory table)的大小。这个值用来计算内存表的最大行数值。
      此变量和tmp_table_size一起限制了内部内存表的大小。如果某个内部heap（堆积）表大小超过tmp_table_size，mysql可以根据需要自动将内存中的heap表改为基于硬盘的MyISAM表。
  tmp_table_size
      通过设置tmp_table_size选项来增加一张临时表的大小，例如做高级GROUP BY操作生成的临时表。
  thread_concurrency
      并发线程数,推荐设置为服务器cpu核数的2倍
  wait_timeout
      指定一个请求的最大连接时间
  innodb_buffer_pool_size
      相当于key_buffer_size对于MyISAM表的作用一样。InnoDB使用该参数指定大小的内存来缓冲数据和索引。
  innodb_log_buffer_size
      log缓存大小，默认为16M。
  innodb_additional_mem_pool_size
      指定InnoDB用来存储数据字典和其他内部数据结构的内存池大小。缺省值是1M。
  innodb_thread_concurrency=8
      并发线程数,推荐设置为cpu核数的2倍，默认一般为8
  innodb_flush_log_at_trx_commit
      控制了innodb将log buffer中的数据写入日志文件并flush磁盘的时间点，取值分别为0、1、2三个。
      0，表示当事务提交时，不做日志写入操作，而是每秒钟将log buffer中的数据写入日志文件并flush磁盘一次；
      1，每次事物的提交都会进行日志文件写入、flush磁盘的操作，确保了事务的ACID；默认值1。
      2，每次事务提交引起写入日志文件的动作；但并不会立即刷写到磁盘。文件系统什么时候会将缓存中的这个数据同步到物理磁盘文件Log Thread 就完全不知道了。
      实际使用发现，此值对插入数据的速度影响非常大，设置为2时插入10000条记录只需要2秒，设置为0时只需要1秒，而设置为1时则需要229秒。
      因此，建议尽量将插入操作合并成一个事务，这样可以大幅提高速度。在允许丢失最近部分事务的危险的前提下，可以把该值设为0或2。
      如果SQL慢可能是IO压力太大的缘故,就可以调整此参数

---------------------------------------------------------
mysql查询注意点
查询条件使用!=以及<>不等于的时候，查询用不上索引.
查询条件字段使用函数的时候,无法使用索引
在join的时候条件字段类型不一致的时候,无法使用索引,
在组合索引里使用非第一个索引时也不使用索引.
在使用like的时候,以%开头,即"%***"的时候无法使用索引
在使用or的时候,要求or前后字段都有索引.

有时候mysql query optimizer会认为使用索引并不是最优计划,所以不使用索引,可以在sql语句里可以用 force index,
当然有时候使用也不会比不用快,所以需要忽略掉index方法是ignore index.
----------------------------------------------------------------------------------------------