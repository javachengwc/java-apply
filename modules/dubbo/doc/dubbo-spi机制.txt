Java SPI使用了策略模式，一个接口多中实现。
具体步骤：
1，定义一个接口以及方法
2，编写接口实现类
3，在META-INF/services/目录下，创建一个以接口全路径命名的文件
4，文件内容为具体实现类的全路径名，多个用分行符分隔
5，代码中通过java.util.ServiceLoader来加载具体实现类

Dubbo SPI自己实现了Ioc和AOP机制。
Dubbo SPI只是加载配置文件中的类，并分成不同种类缓存在内存中，不会立即全部初始化。
Dubbo SPI缓存的Class并不会全部实例化，而是按需实例化并缓存，性能比Java SPI更好。
具体步骤：
1，定义一个接口及方法，为接口类添加SPI注解,设置默认实现，比如：@SPI("impl")，默认实现为impl
2，编写接口实现类
3，在META-INF/dubbo或META-INF/dubbo/internal目录下，创建一个以接口全路径命名的文件
4，文件内容为key=扩展点实现类全路径名，多个用分行符分隔。比如impl=实现类的全路径名。
5，代码中通过ExtensionLoader获取接口默认实现，调用Dubbo SPI
Dubbo SPI的扩展类有四个特性：
1，自动包装
2，自动加载
3，自适应，具体实现类不写死在配置或代码中。在运行时，通过传入URL中的参数动态确定，使用@Adaptive注解。
3，自动激活