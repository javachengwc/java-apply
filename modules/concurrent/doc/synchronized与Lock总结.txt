java中存在两种内建的synchronized语法：
    1,synchronized语句；
    2,synchronized方法。
对于synchronized语句,当Java源代码被javac编译成bytecode的时候，会在同步块的入口位置和退出位置分别插入monitorenter和monitorexit字节码指令。
对于synchronized方法,它会被翻译成普通的方法调用和返回指令,如:invokevirtual、areturn指令，在JVM字节码层面并没有任何特别的指令来实现被synchronized修饰的方法，
而是在Class文件的方法表中将该方法的access_flags字段中的synchronized标志位置1，表示该方法是同步方法，
并使用调用该方法的对象或该方法所属的Class在JVM的内部对象表示Klass做为锁对象。

synchronized锁又称为对象监视器（object），当多个线程同时请求某个对象监视器时，对象监视器会将这些请求存储在不同的容器中。
    Contention List：所有请求锁的线程将被首先放置到该竞争队列
    Entry List：Contention List中那些有资格成为候选人的线程被移到Entry List
    Wait Set：那些调用wait方法被阻塞的线程被放置到Wait Set
    OnDeck：任何时刻最多只能有一个线程正在竞争锁，该线程称为OnDeck
    Owner：获得锁的线程称为Owner
    !Owner：释放锁的线程
新请求锁的线程将首先被加入到ConetentionList中，当某个拥有锁的线程（Owner状态）调用unlock之后，如果发现EntryList为空则从ContentionList中移动线程到EntryList。
EntryList与ContentionList逻辑上同属等待队列，ContentionList会被线程并发访问，为了降低对ContentionList队尾的争用，而建立EntryList。
Owner线程在unlock时会从ContentionList中迁移线程到EntryList，并会指定EntryList中的某个线程（一般为Head）为Ready（OnDeck）线程。
Owner线程并不是把锁传递给OnDeck线程，只是把竞争锁的权利交给OnDeck，OnDeck线程需要重新竞争锁。
这样虽然牺牲了一定的公平性，但极大的提高了整体吞吐量，在Hotspot中把OnDeck的选择行为称之为“竞争切换”。
OnDeck线程获得锁后即变为owner线程，无法获得锁则会依然留在EntryList中，考虑到公平性，在EntryList中的位置不发生变化（依然在队头）。
如果Owner线程被wait方法阻塞，则转移到WaitSet队列；如果在某个时刻被notify/notifyAll唤醒，则再次转移到EntryList。

在JDK1.5中，synchronized是性能低效的。
因为这是一个重量级操作，它对性能最大的影响是阻塞的实现，挂起线程和唤醒线程的操作都需要转入内核态中完成，这些操作给系统的并发性带来了很大的压力。
synchronized采用的并发策略是互斥同步，
互斥同步最主要的问题就是进行线程阻塞和唤醒所带来的性能问题，因而这种同步又称为阻塞同步，它属于一种悲观的并发策略，即线程获得的是独占锁。
独占锁意味着其他线程只能依靠阻塞来等待线程释放锁。而在CPU转换线程阻塞时会引起线程上下文切换，
当有很多线程竞争锁的时候，会引起CPU频繁的上下文切换导致效率很低。
相比之下使用Java提供的Lock对象，性能更高一些。
多线程环境下，synchronized的吞吐量下降的非常严重，而ReentrankLock则能基本保持在同一个比较稳定的水平上。
在JDK1.6及以后，synchronize加入了很多优化措施，有自适应自旋，锁消除，锁粗化，轻量级锁，偏向锁等等。
在JDK1.6上synchronize的性能并不比Lock差。

synchronized在jdk1.6以及之后自身的优化
jvm中monitorenter和monitorexit字节码依赖于底层的操作系统的Mutex Lock来实现的，
但是由于使用Mutex Lock需要将当前线程挂起并从用户态切换到内核态来执行，这种切换的代价是非常昂贵的；
然而在现实中的大部分情况下，同步方法是运行在单线程环境（无锁竞争环境）如果每次都调用Mutex Lock那么将严重的影响程序的性能。
jdk1.6中对锁的实现引入了大量的优化
1,轻量级锁(Lightweight Locking)
    此锁实现基于这样一种假设，即在真实的情况下程序中的大部分同步代码一般都处于无锁竞争状态（即单线程执行环境），
    在无锁竞争的情况下完全可以避免调用操作系统层面的重量级互斥锁，
    取而代之的是在monitorenter和monitorexit中只需要依靠一条CAS原子指令就可以完成锁的获取及释放。
    当存在锁竞争的情况下，执行CAS指令失败的线程将调用操作系统互斥锁进入到阻塞状态，当锁被释放的时候被唤醒。
    如果没有竞争，轻量级锁使用 CAS 操作避免了使用互斥量的开销，但如果存在锁竞争，除了互斥量的开销外，还额外发生了 CAS 操作，
    因此在有竞争的情况下，轻量级锁会比传统的重量级锁更慢。
2,线程自旋和适应性自旋(Adaptive Spinning)
    线程其实是映射在内核之上的，线程的挂起和恢复会极大的影响开销。
    java中很多线程在等待锁的时候，在很短的一段时间就获得了锁，所以它们在线程等待的时候，并不需要把线程挂起，
    而是让它无目的的循环，一般设置10次。这样就避免了线程切换的开销，极大的提升了性能。
    而适应性自旋，是赋予了自旋一种学习能力，它并不固定自旋10次一下。
    它可以根据它前面线程的自旋情况，从而调整它的自旋，甚至是不经过自旋而直接挂起。
    jdk1.6之后默认开启，可以使用参数-XX:+UseSpinning控制,自旋等待本身虽然避免了线程切换的开销，但它是要占用处理器时间的，
    因此，如果锁被占用的时间很短，自旋等待的效果就会非常好，反之，如果锁被占用的时候很长，
    那么自旋的线程只会白白消耗处理器资源，而不会做任何有用的工作，反而会带来性能上的浪费。
    自旋次数的默认值是10次，可用参数 -XX:PreBlockSpin 来更改。
3,锁消除
    锁消除,就是把不必要的同步在编译阶段进行移除。通过运行时JIT编译器的逃逸分析来消除一些没有在当前同步块以外被其他线程共享的数据的锁保护，
    通过逃逸分析也可以在线程本地Stack上进行对象空间的分配（同时还可以减少Heap上的垃圾收集开销）
    在jdk1.5以前，String字符串拼接操作其实底层是StringBuffer来实现的（写一个简单的demo，然后查看class文件中的字节码指令就清楚了），
    StringBuffer是一个线程安全的类，也就是多个append方法都会同步，通过指针逃逸分析（就是变量不会外泄），会发现在这段代码并不存在线程安全问题。
    而在jdk1.5之后，是用StringBuilder来拼接的。StringBuilder与StringBuffer最大的不同是StringBuilder不是线程安全的。
4,锁粗化(Lock Coarsening)
    减少不必要的紧连在一起的unlock，lock操作，将多个连续的锁扩展成一个范围更大的锁。
5,偏向锁(Biased Locking)
    是为了在无锁竞争的情况下避免在锁获取过程中执行不必要的CAS原子指令，进一步提高程序的运行性能。
    如果说轻量级锁是在无竞争的情况下使用 CAS 操作去消除同步使用的互斥量，
    那偏向锁就是在无竞争的情况下把整个同步都消除掉，连CAS操作都不做了。

Lock接口
public interface Lock {
    //尝试获取锁，获取成功则返回，否则阻塞当前线程
    void lock();
    //尝试获取锁，线程在成功获取锁之前被中断，则放弃获取锁，抛出异常
    void lockInterruptibly() throws InterruptedException;
    //尝试获取锁，获取锁成功则返回true，否则返回false
    boolean tryLock();
    //尝试获取锁，若在规定时间内获取到锁，则返回true，否则返回false，未获取锁之前被中断，则抛出异常
    boolean tryLock(long time, TimeUnit unit) throws InterruptedException;
    //释放锁
    void unlock();
    //返回当前锁的条件变量，通过条件变量可以实现类似notify和wait的功能，一个锁可以有多个条件变量
    Condition newCondition();
}
Lock底层是CAS乐观锁的体现，主要靠AQS(AbstractQueuedSynchronizer类)队列同步器和CAS操作实现的。
ReetrantLock采用的并发策略是基于冲突检测的乐观并发策略,
基于冲突检测的乐观并发策略，通俗地讲就是先进性操作，如果没有其他线程争用共享数据，那操作就成功了，
如果共享数据被争用，产生了冲突，那就再进行其他的补偿措施（最常见的补偿措施就是不断地重试，直到试成功为止），
这种乐观的并发策略的许多实现都不需要把线程挂起，因此这种同步被称为非阻塞同步。
在乐观的并发策略中，需要操作和冲突检测这两个步骤具备原子性，它靠硬件指令来保证，这里用的是CAS操作（Compare and Swap）。

ReentrantLock的实现
ReentrantLock的Lock过程,ReentrantLock把所有Lock接口的操作都委派到一个Sync类上，该类继承了AbstractQueuedSynchronizer（简称AQS）
    1,在初始化ReentrantLock的时候，如果我们不传参数是否公平，那么默认使用非公平锁，也就是NonfairSync。
    2,调用ReentrantLock的lock方法的时候，实际上是调用了NonfairSync的lock方法，这个方法先用CAS操作，去尝试抢占该锁。
      如果成功，就把当前线程设置在这个锁上，表示抢占成功。如果失败，则调用acquire模板方法，等待抢占。
    3,调用acquire(1)实际上使用的是AbstractQueuedSynchronizer的acquire方法，它是一套锁抢占的模板，总体原理是先去尝试获取锁，
      如果没有获取成功，就在CLH队列中增加一个当前线程的节点，表示等待抢占。然后进入CLH队列的抢占模式，进入的时候也会去执行一
      次获取锁的操作，如果还是获取不到，就调用LockSupport.park将当前线程挂起。当持有锁的那个线程调用unlock的时候，会将CLH
      队列的头节点的下一个节点上的线程唤醒，调用的是LockSupport.unpark方法。
ReentrantLock的UnLock过程
    1,调用unlock方法，其实是直接调用AbstractQueuedSynchronizer的release操作。
    2,进入release方法，内部先尝试tryRelease操作,主要是去除锁的独占线程，然后将状态减一，这里减一主要是考虑到可重入锁可能自身会
      多次占用锁，只有当状态变成0，才表示完全释放了锁。
    3，tryRelease成功，则将CHL队列的头节点的状态设置为0，然后唤醒下一个非取消的节点线程。
     一旦下一个节点的线程被唤醒，被唤醒的线程就会进入acquireQueued代码流程中，去获取锁

Lock与synchronized的异同
相同处:
1,Lock锁与synchronized都是可重入锁,它们都具备一样的线程重入特性。
不同处:
1,synchronized是在JVM层面实现的数据同步，
  Lock锁是一个java类,其实现依赖AbstractQueuedSynchronizer类（简称AQS)和CAS乐观锁。
  它的基本思想就是一个同步器，支持获取锁和释放锁两个操作。
2,synchronized锁释放是jvm层面实现的，在线程执行完同步代码时释放锁,当发生异常时，也会自动释放线程占有的锁，因此不会导致死锁现象发生。
  Lock锁必须手动释放锁，在finally中释放锁，不然容易造成线程死锁。
3,Lock锁等待获取锁过程中可中断：当持有锁的线程长期不释放锁时，正在等待的线程可以选择放弃等待。
  而在等待由synchronized产生的互斥锁时，会一直阻塞，是不能被中断的。
4,Lock锁可实现公平锁：多个线程在等待同一个锁时，必须按照申请锁的时间顺序排队等待，而非公平锁则不保证这点。
   synchronized中的锁是非公平锁，ReentrantLock默认情况下也是非公平锁，但可以通过构造方法ReentrantLock（ture）来创建公平锁。
5,Lock锁可以绑定多个条件：ReentrantLock对象可以同时绑定多个Condition对象（条件变量或条件队列），
   而在synchronized中，锁对象的wait（）和notify（）或notifyAll（）方法可以实现一个隐含条件，
   但如果要和多于一个的条件关联的时候，就不得不额外地添加一个锁，
   而ReentrantLock则无需这么做，只需要多次调用newCondition（）方法即可。
   而且还可以通过绑定Condition对象来判断当前线程通知的是哪些线程（即与Condition对象绑定在一起的其他线程）。
