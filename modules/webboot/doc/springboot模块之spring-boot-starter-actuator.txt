----------------------------------------------------------------
spring-boot-starter-actuator用于集中采集应用的各项指标信息。
pom:
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>

springboot启动后此模块提供的接口默认情况下是不允许访问的，会返回401:Unauthorized
若要关闭验证 application.properties 中设置management.security.enabled=false
若要开启验证
    a,pom中加入spring-security依赖
      <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-security</artifactId>
      </dependency>
     b,在application.properties中加入认证信息,如下:
     security.user.name=admin
     security.user.password=admin
     management.security.enabled=true
     management.security.role=ADMIN
     访问http://localhost:8080/env,就看到需要输入用户名和密码了。

     如果在application.properties还有额外的配置项目,比如:
     management.contextPath=/manage       #设置ContextPath
     management.port=8081
     那么访问url就是：http://localhost:8081/manage/env

spring-boot-starter-actuator默认端点Endpoint也就是接口如下:
应用配置类
  /autoconfig                    获取应用的自动化配置报告，该接口数据可以帮助找到一些自动化配置为什么
                                 没有生效的具体原因。
                                 positiveMatches中返回的是条件匹配成功的自动化配置。
                                 negativeMatches中返回的事条件匹配不成功的自动化配置。

  /beans                         获取应用上下文中创建的所有Bean
  /configprops                   获取应用中配置的属性信息
  /env                           获取应用所有可用的环境属性(可看到配置文件中的配置信息)
  /mappings                      获取应用所有Spring MVC的控制器映射关系
  /info                          获取应用自定义的信息
                                 默认情况下，该端点只会返回一个空的json内容。
                                 在application.properties配置文件中通过info前缀来设置一些属性，比如：
                                 info.app.name=spring-boot-hello
                                 info.app.version=v1.0.0
                                 通过此接口访问能返回对应的json数据

度量指标类
  /metrics                      返回应用的各类重要度量指标信息
  /health                       返回应用的各类健康指标信息
  /dump                         返回程序运行中的线程信息
  /trace                        返回基本的HTTP跟踪信息
操作控制类
  /shutdown                     关闭应用
端点的启用与禁用可在application.properties中配置
endpoints.configprops.enabled=false      #禁用cvonfigprops端点
endpoints.shutdown.enabled=false         #禁用shutdown端点
endpoints.metrics.filter.enabled=false   #禁用metrics servlet filter
spring.metrics.servo.enabled=false       #禁用metrics服务

/metrics 展示了jvm的内存，cpu核数，线程数，gc情况。
系统信息：
    包括处理器数量processors、运行时间uptime和instance.uptime、系统平均负载systemload.average。
mem.*：
    内存概要信息，包括分配给应用的总内存数量以及当前空闲的内存数量。这些信息来自java.lang.Runtime。
heap.*：
    堆内存使用情况。这些信息来自java.lang.management.MemoryMXBean接口中getHeapMemoryUsage方法获取的java.lang.management.MemoryUsage。
nonheap.*：
    非堆内存使用情况。这些信息来自java.lang.management.MemoryMXBean接口中getNonHeapMemoryUsage方法获取的java.lang.management.MemoryUsage。
threads.*：
    线程使用情况，包括线程数、守护线程数（daemon）、线程峰值（peak）等，这些数据均来自java.lang.management.ThreadMXBean。
classes.*：
    应用加载和卸载的类统计。这些数据均来自java.lang.management.ClassLoadingMXBean。
gc.*：
    垃圾收集器的详细信息，包括垃圾回收次数gc.ps_scavenge.count、垃圾回收消耗时间gc.ps_scavenge.time、
    标记-清除算法的次数gc.ps_marksweep.count、标记-清除算法的消耗时间gc.ps_marksweep.time。
    这些数据均来自java.lang.management.GarbageCollectorMXBean。
httpsessions.*：
    Tomcat容器的会话使用情况。包括最大会话数httpsessions.max和活跃会话数httpsessions.active。
    该度量指标仅在引入了嵌入式Tomcat作为应用容器的时候才会提供。
gauge.*：
    HTTP请求的性能指标之一，它主要用来反映一个绝对数值。
    比如gauge.response.hello: 5，它表示上一次hello请求的延迟时间为5毫秒。
-------------------------------
自定义端点
a,覆盖已有端点，比如/health端点
@Component
public class CustomHealth implements HealthIndicator {
    public Health health() {
        return Health.up().build();
    }
}

b,创建新端点
@Component
public class TestEndpoint implements Endpoint<String> {
    public String getId() {
        return "test";
    }
    public boolean isEnabled() {
        return true;
    }
    public boolean isSensitive() {
        return true;
    }
    public String invoke() {
        return "test";
    }
}

c,列举所有端点
@Component
public class ListEndpoint extends AbstractEndpoint<List<Endpoint>> {
    private List<Endpoint> endpoints;
    @Autowired
    public ListEndpoint(List<Endpoint> endpoints) {
        super("allEndpoint");
        this.endpoints = endpoints;
    }
    public List<Endpoint> invoke() {
        return this.endpoints;
    }
}
---------------------------------------------------------------