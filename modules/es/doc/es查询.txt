------------------------es查询----------------------
理解lucence filter工作原理对于写出高性能查询语句至关重要. 许多搜索性能优化都和filter的使用有关.
filter使用bitsets进行布尔运算, query使用倒排索引进行计算, 这是filter比query快的原因. bitsets的优势主要体现在:
1. bitsetcache在内存里面, 永不消失(除非被LRU).
2. bitsets利用CPU原生支持的位运算操作, 比倒排索引快个数量级
3. 多个bitsets的与运算也是非常的快(一个64位CPU可以同时计算64个DOC的与运算)
4. bitsets 在内存的存储是独立于query的, 有很强的复用性
5. 如果一个bitset片段全是0, 计算会自动跳过这些片段, 让bitsets在数据稀疏情况下同样表现优于倒排索引.

比如:
query:bool:
    tag:'iphone'
    region:'sichuan'
    title: "apple"
lucence处理这个query的方式是在倒排索引中寻找这三个term的倒排链 ,并使用跳指针技术求交, 在运算过程中需要对每个doc进行算分.
实际上tag和region对于算分并没有作用, 它们充当是过滤器的作用.这就是过滤器使用场景, 它只存储存在和不存在两种状态.
如果把tag和region使用bitsets进行存储, 这样这两个过滤器可以一直都被缓存在内存里面, 这样会快很多.
另外tag和region之间的求交非常迅速, 因为64位机器可以时间一个CPU周期同时处理64个doc的位运算.
正确的写法为:
query:
    filtered:
        query:
             title:"apple"
         filter:
             tag:"iphone"
             region:"sichuan"

lucence的filtered query会智能的先计算filter语句, 然后才计算query语句, 尽可能在进行复杂的倒排算法前减少计算空间。
一个lucence金科玉律是: 能用filter就用filter, 除非必须使用query(当且仅当需要算分的时候)。

------------------------------------------------
词项查询(term查询)
词项查询将按照存储在倒排索引中的词项进行精确查询。这些查询通常用于数字，日期和枚举等结构化数据，而不是全文本字段。
GET book/book/_search                                       ------按词项条件分页排序查询出指定的列
{
  "from":0,
  "size":2,
  "version": true,
  "_source": ["title","author"],
  "query": {
    "term": {
        "title": "solr"
    }
  },
  "sort": [
   {"id":{"order":"desc"}}
  ]
}
GET book/book/_search                                        ------按照评分来查询
{
  "min_score":"0.5",
  "query": {
    "term": {
        "title": "solr"
    }
  }
}
高亮查询
es支持三个高亮器：unified，plain和fvh（快速向量高亮器）
Unified高亮器---使用lucene统一高亮器。 它将文本分解为句子，并使用BM25算法对单个句子进行评分，就好像它们是文集中的文档一样。
它还支持准确的短语和多项（模糊，前缀，正则表达式）突出显示。 这是默认的高亮器。
plain高亮器---使用标准的lucene高亮器。 它试图在短语查询中理解单词重要性和任何单词定位标准来反映查询匹配逻辑。
fvh高亮器---使用Lucene Fast Vector高亮器。它可用于在映射中将term_vector设置为with_positions_offsets的字段。

GET book/book/_search                                       ------查询显示高亮,当结果中的title有solr关键字时，此关键字高亮显示
{
  "query": {
    "term": {
        "title": "solr"
    }
  },
  "highlight": {
    "fields": {
      "title": {}
    }
  }
}
GET book/book/_search                                       ------查询显示多字段高亮,自定义高亮标签
{
    "query" : {
        "match": { "title": "solr" }
    },
    "highlight" : {
        "fields" : {
            "title" : {
              "pre_tags":["<mark>"],
              "post_tags":["</mark>"],
              "type" : "plain"                              ------type字段允许强制设定的高亮器类型。可以的值是：unified, plain和fvh
            },
            "content" : {}
        }
    }
}
根据文档的_id的数组ids查询
GET book/book/_search
{
    "query": {
        "ids" : {
            "values" : ["1", "2"]
        }
    }
}
根据索引type来查询
GET /_search
{
    "query": {
        "type" : {
            "value" : "book"
        }
    }
}
range查询,range查询用于匹配数值型、日期型或字符串型字段在某一范围内的文档
GET book/book/_search
{
    "query": {
        "range" : {
            "age" : {
                "gte" : 10,
                "lte" : 20
            }
        }
    }
}
GET book/book/_search                                     ------日期范围查询
{
    "query": {
        "range" : {
            "createTime" : {
                "gte" : "2012-02-02",
                "lte" :  "2012-12-12",
                "format": "yyyy-MM-dd"
            }
        }
    }
}
exists查询,返回原始字段中至少包含一个非空值的文档(此字段存在且不为null)
GET book/book/_search
{
    "query": {
        "exists" : { "field" : "author" }
    }
}
missing聚合查询
GET book/book/_search                     ------查询缺失saleCnt字段的文档或saleCnt为null的文档数
{
  "size": 0,
  "aggs": {
    "no_count": {
      "missing": {"field": "saleCnt"}
    }
  }
}
prefix查询
GET book/book/_search
{ "query": {
    "prefix" : { "author" : "wu" }
  }
}
wildcard查询（通配符查询）
GET book/book/_search
{
    "query": {
        "wildcard" : { "content" : "*是*" }
    }
}
regexp查询（正则表达式查询）
GET book/book/_search
{
    "query": {
        "regexp":{
            "title": "利.*"
        }
    }
}
fuzzy查询（模糊查询）
GET book/book/_search
{
    "query": {
        "fuzzy":{
            "title": "的"
        }
    }
}
全文检索查询
GET book/book/_search                                     ------全文检索 and查询
{
  "query": {
    "match": {
        "title":{
          "query":"solr搜索",
          "operator":"and"
        }
    }
  }
}
GET book/book/_search                                    ------全文检索 or查询，默认就是or查询
{
  "query": {
    "match": {
        "title":{
          "query":"solr锋利",
          "operator":"or"
        }
    }
  }
}
GET book/book/_search                                     ------分页排序查询
{
  "from":0,
  "size":2,
  "query": {
    "match_all": {}
  },
  "sort": [
      {"createTime":{"order":"desc"}},
      {"id":{"order":"desc"}}
    ]
}
match_phrase查询（短语查询）
match_phrase查询会将查询内容分词，分词器可以自定义，文档中同时满足以下两个条件才会被检索
1,分词后所有词项都要出现在该字段中
2,字段中的词项顺序要一致
GET book/book/_search                                   ------短语查询
{
  "query": {
    "match_phrase": {
      "title": "搜索引擎"
    }
  }
}
match_phrase_prefix 查询（前缀查询）
GET book/book/_search                                   ------前缀查询
{
  "query": {
    "match_phrase_prefix": {
      "title": "sol"
    }
  }
}
multi_match 查询,是match查询的升级版，用于多字段全文检索
GET book/book/_search
{
  "query": {
    "multi_match": {
      "query": "lucene",
      "fields": ["titie","content"]
    }
  }
}                                                      ------多字段全文检索,根据title,content字段全文检索lucene,只要有任意一个字段匹配就返回
common_terms 查询（常用词查询）
common_terms查询把查询分词后的词项分为重要词项和不重要词，在搜索时，首先搜索与重要词匹配的文档，然后执行第二次搜索
GET book/book/_search
{
    "query": {
        "common": {
            "title": {
                "query": "的jquery",
                "low_freq_operator": "and"
            }
        }
    }
}
query_string查询，许在一个查询语句中使用多个特殊条件关键字
simple_query_string查询,解析出错时不抛异常，丢弃查询无效的部分
GET book/book/_search
 {
   "query": {
     "simple_query_string" : {
         "query": "(jquery | solr) -项目",
         "fields": ["title^5", "content"],
         "default_operator": "and"
     }
   }
 }
聚合查询
聚合查询的key有value_count,max,min,avg,sum,stats,extended_stats,cardinality,percentiles。
value_count---表示包含某一字段（比如saleCnt）的文档数。
cardinality---依照那个field的值的基数，也就是类似sql中的count(distinct fieldValue)
percentiles---表示百分位统计
GET book/book/_search                   ------查询最大,最小,平均销售数量(max,min,avg不会考虑不包含此field的文档)
{
  "size": 0,
  "aggs": {
    "maxCnt": {
      "max": {"field": "saleCnt"}
    },
    "minCnt": {
      "min": {"field": "saleCnt"}
    },
    "avgCnt": {
      "avg": {"field": "saleCnt"}
    }
  }
}
GET book/book/_search                  ------查询统计stats信息，结果包含命中的数量，最大,最小,平均,总和值
                                             extended_stats的统计信息中，还包含其他信息
{
  "size": 0,
  "aggs": {
    "stats_sale": {
      "stats": {"field": "saleCnt"}
    },
    "ext_stats_sale": {
       "extended_stats": {"field": "saleCnt"}
    }
  }
}
桶聚合查询(bucket aggregations查询)(分组聚合查询)
terms聚合用于分组聚合
GET book/book/_search                       ------根据title分组，查询出各分组记录个数,并获取各分组平均销售数
{
   "size": 0,
   "aggs": {
     "group_count": {
       "terms": {"field": "title"},
       "aggs":{
           "avg_sale":{
              "avg":{"field": "saleCnt"}
            }
        }
     }
   }
}
GET book/book/_search                      ------根据author=wuming条件进行刷选，刷选后求saleCnt的平均值
{
  "size": 0,
  "aggs": {
    "group_count": {
      "filter": {
        "term":{"author": "wuming"}
      },
      "aggs":{
        "avg_sale":{
          "avg":{"field": "saleCnt"}
        }
      }
    }
  }
}
GET book/book/_search                     ------统计content字段包含”jquery”和包含”solr”的文档数
{
  "size": 0,
  "aggs" : {
    "rt" : {
      "filters" : {
        "filters" : {
          "jquery" :   { "match" : { "content" : "jquery"   }},
          "solr" : { "match" : { "content" : "solr" }}
        }
      }
    }
  }
}
GET book/book/_search                   ------统计按照content字段包含”jquery”和包含”solr”的分组，各分组的平均saleCnt。
{
  "size": 0,
  "aggs": {
    "group_count": {
      "filters":{
        "filters": [
          {"match":{"content": "jquery"}},
          {"match":{"content": "solr"}}
        ]
      },
      "aggs":{
        "avg_sale":{
            "avg":{"field": "saleCnt"}
        }
      }
    }
  }
}
GET book/book/_search                  ------根据saleCnt范围分组，获取各分组文档数,这里的返回是[0,100),[100,300),[300,+无穷大)，
                                             注意右边界是小于，而不是小于等于。
{
  "size": 0,
  "aggs": {
    "group_count": {
      "range": {
        "field": "saleCnt",
        "ranges": [
            {"to": 100},
            {"from": 100,"to":300},
            {"from": 300}
        ]
      }
    }
  }
}
GET book/book/_search
{
  "size": 0,
  "aggs": {
    "group_count": {
      "range": {
        "field": "createtime",
        "format":"yyyy-MM-dd",
        "ranges": [
            {"to": "2017-06-01"},
            {"from": "2017-06-01","to":"2018-01-01"},
            {"from": "2018-01-01"}
        ]
      }
    }
  }
}
GET book/book/_search                   ------查询一年前之前录入的文档数和从一年前以来到现在录入的文档数
{
  "size": 0,
  "aggs": {
    "group_count": {
      "range": {
        "field": "createtime",
        "format":"yyyy-MM-dd",
        "ranges": [
            {"to": "now-12M/M"},
            {"from": "now-12M/M"}
        ]
      }
    }
  }
}
------------------------------------------------
http方式查询
http://127.0.0.1:9200/search/{"query":{"term":{"user.name":"cheng"}}}  --post方式查询(get方式拿不到结果)

http://127.0.0.1:9200/search/
{"query":
    {"bool":
        {"must":
            [{"term":
                {"user.name":"cheng"}
            }],
         "must_not":[],
         "should":[]
         }
    },
    "from":0,
    "size":10,
    "sort":[],
    "facets":{}
}

http://127.0.0.1:9200/search/
{
    "query": {
        "bool": {
            "must": [
                {
                    "term": {
                        "user.name": "cheng"
                    }
                }
                ,
                {
                    "range": {
                        "user.age": {
                            "from": "20",
                            "to": "50"
                        }
                    }
                }
            ],
            "must_not": [ ],
            "should": [ ]
        }
    },
    "from": 0,
    "size": 10,
    "sort": [ ],
    "facets": { }
}
---------------------------------------------------





