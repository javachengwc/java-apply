------------------------------------kibana-apm----------------------------------
APM 也就是Application Performance Management，应用性能管理，对应用即时监控以实现对应用程序性能管理和故障管理的系统化的解决方案。
java开源的apm有：
    美团点评cat       ------美团点评的分布式实时监控系统,采用的是api手工埋点的方式，而不是用agent的方式，对java来说用起来还需要包装一下。
    naver/pinpoint    ------韩国的一个公司开源的，采用agent的方式，对java友好。
Elastic APM源自于收购的Opbeat，改头换面推出的服务。
Elastic APM的组件包括APM Server,APM Agent,Elasticsearch,Kibana APM UI,
服务侧 需要Elasticsearch,Kibana,APM Server,接受agent的打点数据；
需要监控的应用侧 需要部署APM Agent，负责应用性能和错误数据的采集，当前支持node、python、ruby、js，java和golang;

wget https://artifacts.elastic.co/downloads/apm-server/apm-server-6.5.0-linux-x86_64.tar.gz         ------下载安装apm-server
tar -zxvf apm-server-6.5.0-linux-x86_64.tar.gz
cd apm-server-6.5.0-linux-x86_64
./apm-server setup                                   ------导入kibana apm定制的dashboard
vim apm-server.yml                                   ------修改配置，主要是配置es地址,kibana地址,apm-server的端口
    output.elasticsearch:
      hosts: ["localhost:9200"]
    apm-server:
      host: "0.0.0.0:8200"
    setup.kibana:
      #host: "localhost:5601"
./apm-server -e  &                                   ------启动 apm-server,默认端口8200
-----------------------------------------------------------

应用侧启动一个带apm agent的node服务，来模拟对这个服务的监控
mkdir -p /data/deploy/apm-nodeapp
cd /data/deploy/apm-nodeapp
npm init
npm install elastic-apm-node --save                  -------安装apm agent 的node版本elastic-apm-node
npm install express --save                           -------安装express
vim package.json
    {
      "name": "apm-nodeapp",
      "version": "1.0.0",
      "description": "",
      "main": "index.js",
      "scripts": {
        "start": "node index.js",
        "test": "echo \"Error: no test specified\" && exit 1"
      },
      "author": "",
      "license": "ISC",
      "dependencies": {
        "elastic-apm-node": "1.14.4",               -------这里修改下elastic-apm-node的版本为1.X的版本，因为2.X的版本与Kibana6.3版本不兼容
        "express": "^4.16.4"
      }
    }
vim index.js
    var apm = require('elastic-apm-node').start({
     serviceName: 'node-test',
     secretToken: '',
     serverUrl: 'http://localhost:8200' })
    const express = require('express')
    const app = express()
    app.get('/', (req, res) => res.send('hello world'))
    app.listen(3000, () => console.log('example app listening on port 3000'))
npm install
npm run start                                      ------正常情况下，这个node服务就启动起来了

http://127.0.0.1:3000                              ------访问此node服务
在kibana页面apm模块下，就能看到此node服务的监控信息.
------------------------------------------------------------

对于独立的java应用APM agent的集成
在github/elastic/apm-agent-java上下载elastic-apm-agent-<version>.jar包，位于Download the latest snapshot from master here链接中。
java -javaagent:elastic-apm-agent-<version>.jar\
 -Delastic.apm.service_name=my-app\
 -Delastic.apm.server_url=http://localhost:8200\
 -Delastic.apm.application_packages=org.example\
 -jar my-app.jar

java tomcat应用APM agent的集成
下载elastic-apm-agent-<version>.jar包并放到Tomcat库lib目录下
vim catalina.sh
    JAVA_OPTS="-javaagent:${CATALINA_HOME}/lib/elastic-apm-agent-0.7.1.jar \
          -Delastic.apm.service_name=test \
          -Delastic.apm.server_url=http://localhost:8200 \
          -Delastic.apm.application_packages=com.test"
apm.service_name           ------自定义的应用名称
apm.server_url             ------APM Server的服务地址
javaagent                  ------APM agent库的路径
启动访问tomcat,在kibana页面apm模块下即可查看到相关数据
--------------------------------------------------------------------------------