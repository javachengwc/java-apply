-----------------------------------es配置--------------------------------------
es配置文件elasticsearch.yml各配置项:
cluster.name: club-xxx                                     ###集群名称
node.name: node1                                           ###节点名称
node.master: false                                         ###是否主节点
node.data: true                                            ###是否存储数据
index.store.type: niofs                                    ###读写文件方式
index.cache.field.type: soft                               ###缓存类型
bootstrap.mlockall: true                                   ###内存禁用swap
gateway.type: local                                        ###本地存储
processors:                                                ###强制修改cpu核数，以突破写线程数限制。此参数慎用
index.refresh_interval: 1s                                 ###将index buffer刷新到os cache的时间，刷新到os cache的数据才可以被索引到，默认是1s.
                                                              如果对实时性搜索要求不高,可设置时间长一些，比如30s,以提高性能
index.max_result_window: 10000                             ###索引能够查询到最大数据量，from+size深分页的最大条数。如果全量导出，可以使用scroll游标办法
index.store.preload:                                       ###默认情况下，es完全依靠操作系统文件系统缓存来缓存IO操作.设置index.store.preload，告知操作系统在打开时将热索引文件的内容加载到内存中。
                                                              默认值为空，即不提前加载索引到内存中，可设值有["nvd", "dvd", "tim", "doc", "dim"]。对应的norms, doc values, terms dictionaries, postings lists， points。
                                                              常见的设置为 index.store.preload = ["nvd", "dvd"]，即提前加载norms评分信息和doc value数据到内存，便于快速索引。
gateway.recover_after_nodes: 3                             ###3个数据节点开始恢复
gateway.recover_after_time: 5m                             ###5分钟后开始恢复数据
gateway.expected_nodes: 3                                  ###3个es节点开始恢复
index.mapping.nested_fields.limit: 50                      ###nested fields字段限制个数，默认50
index.mapping.nested_objects.limit :10000
index.mapping.total_fields.limit:1000                      ###索引的字段限制个数
index.mapping.depth.limit: 20                              ###mapping深度限制数
indices.recovery.max_bytes_per_sec: 250mb                  ###节点恢复时的最大带宽
indices.recovery.concurrent_streams: 8                     ###节点从网络复制恢复副本分片时的数据流个数。默认是3
discovery.zen.minimum_master_nodes: 2                      ###实际设置n/2+1,防止脑裂现象
discovery.zen.ping.multicast.enabled: false                ###禁用多播
discovery.zen.ping.unicast.hosts: ["192.168.1.11:9300", "192.168.1.12:9300", "192.168.1.13:9300"]
discovery.zen.ping_timeout: 60s                            ###仅在加入或者选举 master 主节点的时候才起作用
discovery.zen.fd.ping_interval: 10s                        ###节点存活检测间隔
discovery.zen.fd.ping_timeout: 120s                        ###节点存活超时时间,在运行的集群中，master检测所有节点以及节点检测master是否畅通时长期有用
discovery.zen.fd.ping_retries: 6                           ###节点存活超时重试次数
http.cors.enabled: true                                    ###开启监控
index.analysis.analyzer.ik.type: "ik"                      ###ik分词
threadpool.index.type: fixed                               ###索引线程池类型
threadpool.index.size: 64                                  ###索引线程池大小
threadpool.index.queue_size: 1000                          ###索引线程池队列大小
threadpool.index.reject_policy: caller                     ###索引线程池拒绝方式,默认是abort,会使索引请求失败，抛出EsRejectedExecutionException，
                                                              设置成caller会使索引请求在io线程中执行
threadpool.search.size: 64                                 ###检索线程池大小
threadpool.search.type: fixed                              ###检索线程池类型
threadpool.search.queue_size: 1000                         ###检索线程池队列大小
threadpool.get.type: fixed                                 ###取数据线程池类型
threadpool.get.size: 32                                    ###取数据线程池大小
threadpool.get.queue_size: 1000                            ###队列大小
threadpool.bulk.type: fixed                                ###批量请求线程池类型
threadpool.bulk.size: 32                                   ###批量请求线程池大小
threadpool.bulk.queue_size: 1000                           ###批量请求线程池队列大小
threadpool.flush.size: 32                                  ###刷磁盘线程池大小
threadpool.flush.queue_size: 1000                          ###刷磁盘队列大小
indices.store.throttle.type: merge
indices.store.throttle.type: none                          ###写磁盘类型
indices.store.throttle.max_bytes_per_sec: 500mb            ###写磁盘最大带宽
indices.queries.cache.size: 10%                            ###查询缓存大小，默认10%
indices.fielddata.cache.size: 30%                          ###字段数据缓存大小，在聚类或排序中很有必要
index.queries.cache.enabled: false                         ###禁用查询缓存，默认开启
index.merge.scheduler.max_thread_count: 8                  ###索引merge归并线程数
index.merge.policy.floor_segment: 2mb                      ###索引归并的segment大小, 默认是2MB,小于这个大小的 segment，优先被归并
index.merge.policy.max_merge_at_once: 10                   ###一次最多归并多少个segment, 默认10个
index.merge.policy.segments_per_tier: 10                   ###默认10,
index.merge.policy.max_merge_at_once_explicit: 30          ###forcemerge时一次最多归并多少个segment, 默认是30个
index.merge.policy.max_merged_segment: 5gb                 ###大于此值的segment不参与归并, 默认5gb
index.translog.flush_threshold_size: 600MB                 ###刷新translog文件阀值，当translog的大小达到此预设值时, 执行一次flush操作,默认是512mb
index.translog.flush_threshold_ops: 500000                 ###发生多少次操作(累计多少条数据)后进行一次flush, 默认是unlimited
index.translog.flush_threshold_period: 30m                 ###每隔多长时间执行一次flush操作, 默认是30m
index.translog.durability: async                           ###事务日志translog文件异步写入磁盘,事务日志是为了防止数据丢失。
index.translog.sync_interval：5s                           ###translog刷盘间隔时间,默认5秒
index.routing.allocation.total_shards_per_node             ###每个节点分片数量
index.write.wait_for_active_shards: 1                      ###指定有多少个活跃的shards时，才能执行索引文档的操作。默认值为1，即只要primary shard 是活跃的就可以索引文档。
index.unassigned.node_left.delayed_timeout: 5m             ###es启动后,延迟多长时间后才开始分配unassigned的分片
node.attr.box_type: hot                                    ###将节点设置成hot节点，也可设置成warm节点, 表示数据频繁使用程度，热数据，温数据
index.routing.allocation.require.box_type: hot             ###设置将索引写入hot节点,也可设置成warm
cluster.routing.allocation.node_initial_primaries_recoveries: 8      ###初始unassigned primary shard的恢复只能通过原来有这个shard的node被重新启动了来进行恢复。
                                                                        默认是4,此值可稍微设置大一些，以便更多的unassigned primary shard可以更快的被恢复。
cluster.routing.allocation.node_concurrent_incoming_recoveries: 2    ###设置每个节点可以有多少个shard可以接收从外面进来的recovery用的数据。默认2。
cluster.routing.allocation.node_concurrent_outgoing_recoveries: 2   ###设置每个节点可以有多少个shard在向外提供shard recovery的数据。默认2。
cluster.routing.allocation.node_concurrent_recoveries: 2   ###每个节点可同时恢复的分片个数,上面2设置的综合。
cluster.routing.allocation.same_shard.host: false          ###检查防止同一个shard的多个instances在同一个host上面，默认false
cluster.routing.rebalance.enable: all                      ###开关shard的rebalance，none-禁用
cluster.routing.allocation.allow_rebalance                 ###什么时候允许rebalance操作开始，always - 任何时候，
                                                              indices_primaries_active --当集群中的primary shards都被allocated之后才允许
                                                              indices_all_active -- (default) 当集群中的所有的shard(primaries and replicas) 都被allocated之后才允许
cluster.routing.allocation.cluster_concurrent_rebalance: 2 ###设置集群rebalance的并行度，默认2
cluster.routing.allocation.balance.shard: 45%              ###设置每个node上的shard总数在集群balance中占据的权重因子，默认是0.45f,
                                                              增加这个值表示集群的balance更倾向于使每个node上面的shard数量都保持一致。
cluster.routing.allocation.balance.index: 55%              ###设置每个index在node上的shards数量的权重，默认是0.55f,
                                                              增大这个值表示集群的balance更倾向于让index的shards平均的分配到cluster的每个node上
cluster.routing.allocation.balance.threshold:              ###shard rebalance的触发阈值，默认是1.0f,增大这个值表示对集群的balance要求更低，不容易触发rebalance。
cluster.routing.allocation.enable: all                     ###分配的分片类型，默认all, 可选值:all,none,none,new_primaries
cluster.routing.allocation.disk.watermark.low: 85%         ###磁盘的低警戒水位线，默认为磁盘容量的85％。es不会将分片分配给使用磁盘超过85％的节点。
cluster.routing.allocation.disk.watermark.high: 90%        ###磁盘的高警戒水位线，默认为磁盘容量的90％。es将尝试从磁盘使用率超过90％的节点重新分配分片。
cluster.routing.allocation.disk.watermark.flood_stage: 95% ###磁盘的洪水警戒水位线，默认为磁盘容量的95％。es将对每个索引强制只允许只读和删除操作。
cluster.info.update.interval: 30s                          ###检查集群节点磁盘使用情况周期。默认为30秒。
cluster.routing.allocation.disk.threshold_enabled: true    ###默认是true,如果设置为false表示在进行shard allocation的时候不考虑磁盘的因素。
cluster.routing.allocation.disk.include_relocations: true  ###设置在计算node的磁盘的使用量时是否加上relacating的shard的磁盘使用，默认是true。

动态设置es集群配置示例
transient 临时：设置在集群重启之前一直会生效。一旦集群重启，这些设置将被清除。
persistent 永久：设置永久保存，会将修改持久化到文件中，重启之后也不影响。

###禁用自分片，默认是启用all
curl -XPUT localhost:9200/_cluster/settings -d '{
    "transient" : {
        "cluster.routing.allocation.enable": "none"
    }
}'

###禁用分片自平衡，默认是启用all
curl -XPUT localhost:9200/_cluster/settings -d '{
    "transient" : {
        "cluster.routing.rebalance.enable": "none"
    }
}'

###清空某配置为默认值
curl -XPUT localhost:9200/_cluster/settings -d '{
   "persistent": {
       "cluster.routing.allocation.enable": null
   }
}'

###指定退役节点IP
curl -XPUT localhost:9200/_cluster/settings -d '{
    "persistent" : {
        "cluster.routing.allocation.exclude._ip" : "192.168.1.11,192.168.1.12"
    }
}'

###指定保留节点IP,至少符合一项
curl -XPUT localhost:9200/_cluster/settings -d '{
    "persistent" : {
        "cluster.routing.allocation.include._ip" : "192.168.1.11,192.168.1.12"
    }
}'

###指定索引节点IP,至少符合一项
curl -XPUT localhost:9200/<INDEX_NAME>/settings -d '{
    "index.routing.allocation.include._ip": "192.168.1.11,192.168.1.12"
}'

###指定保留节点IP,指定项全部符合
curl -XPUT localhost:9200/_cluster/settings -d '{
    "persistent" : {
        "cluster.routing.allocation.require._ip" : "192.168.1.11,192.168.1.12"
    }
}'

###设置es集群允许使用_all或*通配符的方式删除索引，默认不允许
curl -XPUT localhost:9200/_cluster/settings -d '{
    "persistent" : {
        "action.destructive_requires_name" : false
    }
}'

###设置index恢复时每秒最大字节数限制，默认40mb
curl -XPUT localhost:9200/_cluster/settings -d '{
    "persistent": {
        "indices.recovery.max_bytes_per_sec": "100mb"
    }
}'

###禁止自动创建索引
curl -XPUT localhost:9200/_cluster/settings -d '{
    "persistent": {
        "action.auto_create_index": "false"
    }
}

###禁止自动扩展索引mapping
curl -XPUT localhost:9200/_cluster/settings -d '{
    "persistent": {
        "index.mapper.dynamic": "false"
    }
}

###设置索引异步刷新translog提高写入效率，
###需要先关闭索引再设置，不然会报错Can't update non dynamic settings，然后再打开索引
curl -XPUT localhost:9200/<INDEX_NAME>/_settings -d '{
    "transient" :{
        "index.translog.durability": "async",
        "index.translog.flush_threshold_size":"512mb",
        "index.translog.sync_interval": "60s"
    }
}'

###优化merge的配置项
curl -XPUT localhost:9200/_all/_settings -d '{
    "index.merge.policy.floor_segment":"30mb"
}

###开启慢查询
curl -XPUT localhost:9200/_cluster/settings -d '{
    "transient" :
        {
            "index.search.slowlog.level": "debug",
            "index.search.slowlog.threshold.query.warn": "5s",
            "index.search.slowlog.threshold.query.info": "3s",
            "index.search.slowlog.threshold.query.debug": "1s",
            "index.search.slowlog.threshold.query.trace": "500ms",
            "index.search.slowlog.threshold.fetch.warn": "1s",
            "index.search.slowlog.threshold.fetch.info": "800ms",
            "index.search.slowlog.threshold.fetch.debug": "500ms",
            "index.search.slowlog.threshold.fetch.trace": "200ms"
            "index.indexing.slowlog.threshold.index.warn": "10s",
            "index.indexing.slowlog.threshold.index.info": "5s",
            "index.indexing.slowlog.threshold.index.debug": "2s",
            "index.indexing.slowlog.threshold.index.trace": "500ms",
            "index.indexing.slowlog.level": "info",
            "index.indexing.slowlog.source": "1000",
            "indices.memory.index_buffer_size": "20%"
        }
}'

###设置索引的副本数，如果<INDEX_NAME>设为_all,表示所有索引
curl -XPUT localhost:9200/<INDEX_NAME>/_settings -d' { "number_of_replicas": 2 }'

###设置es节点磁盘的分片分配闸值
curl -XPUT localhost:9200/_cluster/settings -d '{
    "persistent": {
        "cluster.routing.allocation.disk.watermark.low": 85%,
        "cluster.routing.allocation.disk.watermark.high": 90%,
        "cluster.routing.allocation.disk.watermark.flood_stage": 95%,
        "cluster.info.update.interval": "1m"
    }
}'

curl -XPUT localhost:9200/_cluster/settings -d '{
    "transient": {
        "logger.discover": "DEBUG"
    }
    "persistent": {
        "discovery.zen.minimum_master_nodes": 2
    }
}'

###指定自动分片排除的节点，在节点下线时可如此设置
curl -XPUT localhost:9200/_cluster/settings -d '{
    "transient": {
        "cluster.routing.allocation.exclude._name": "node1,node2"
    }
}'

###指定自动分片包含的节点
curl -XPUT localhost:9200/_cluster/settings -d '{
    "transient": {
        "cluster.routing.allocation.include._name": "node1,node2,node3"
    }
}'

curl -XPUT localhost:9200/_cluster/settings -d '{
    "transient": {
        "index.indexing.slowlog.level": "warn"
    }
}'

###分片分配和移动
curl -XPOST localhost:9200/_cluster/reroute -d '{
    "commands" : [ {
        "move" :{
              "index" : "order_data",
              "shard" : 2,
              "from_node" : "node1",
              "to_node" : "node2"
        }
    }]
}'

###设置索引恢复日志级别
curl -XPUT localhost:9200/_cluster/settings -d '{
    "transient": {
        "logger.indices.recovery": "DEBUG"
    }
}'

curl -XPUT localhost:9200/_cluster/settings -d '{
    "transient" :{
        "indices.memory.index_buffer_size": "20%"
    }
}'

------------------------------------------------------------------------------