---------------------------------------es索引---------------------------------------
es写入数据过程：选择协调节点—>根据文件进行路由转发给对应的节点—>节点的主分片处理请求—>数据同步到副本分片—>返回响应
1，客户端选择一个 node 发送请求过去，这个 node 就是 coordinating node（协调节点）。
2，coordinating node 对 document 进行路由，将请求转发给对应的 node（有 primary shard）。
3，实际的 node 上的 primary shard 处理请求，然后将数据同步到 replica node。
4，coordinating node 如果发现 primary node 和所有 replica node 都执行后，返回响应结果给客户端。

es查询数据过程：选择协调节点 —> 索引对应的主分片或者副本分片—>返回文件id给协调节点—>根据文件id去个节点拉取实际数据—>返回结果给客户端
1，客户端发送请求到一个 coordinate node。
2，协调节点将搜索请求转发到所有的 shard 对应的 primary shard 或 replica shard，都可以。
3，query phase：每个 shard 将自己的搜索结果（doc id）返回给协调节点，由协调节点进行数据的合并、排序、分页等操作，产出最终结果。
4，fetch phase：协调节点根据 doc id 去各个节点上拉取实际的 document 数据，最终返回给客户端。
如果是通过 doc id 进行数据查询，会根据 doc id 进行 hash，判断出 doc id 所在 shard ，从此 shard 查询。

es写数据底层原理
es写入数据先写入内存 buffer，在 buffer 里的时候数据是搜索不到的；同时将数据写入 translog 日志文件。
如果 buffer 快满了，或者到一定时间，就会将内存 buffer 数据 refresh 到一个新的 segment file 中，但是此时数据不是直接进入 segment file 磁盘文件，而是先进入 os cache 。这个过程就是 refresh。
默认每隔 1 秒钟，es 将 buffer 中的数据写入一个新的 segment file，每秒钟会产生一个新的磁盘文件 segment file，这个 segment file 中就存储最近 1 秒内 buffer 中写入的数据。
如果 buffer 里面此时没有数据，也不会执行 refresh 操作，如果buffer里面有数据，默认 1 秒钟执行一次 refresh 操作，刷入一个新的 segment file 中。数据写入 segment file 之后，同时就建立好了倒排索引。
操作系统层面，磁盘文件其实都有 os cache，即操作系统缓存，数据写入磁盘文件之前，会先进入 os cache，先进入操作系统级别的一个内存缓存中去。只要 buffer 中的数据被 refresh 操作刷入 os cache中，这个数据就可以被搜索到了。
es的准实时，全称 near real-time。默认是每隔 1 秒 refresh 一次的，所以 es 是准实时的，因为写入的数据 1 秒之后才能被看到。
可以通过 es 的 restful api 或者 java api，手动执行一次 refresh 操作，就是手动将 buffer 中的数据刷入 os cache中，让数据立马就可以被搜索到。
只要数据被输入 os cache 中，buffer 就会被清空了，因为不需要保留 buffer 了，数据在 translog 里面已经持久化到磁盘去一份了。
重复上面的步骤，新的数据不断进入 buffer 和 translog，不断将 buffer 数据写入一个又一个新的 segment file 中去，每次 refresh 完 buffer 清空，translog保留。
随着这个过程推进，translog 会变得越来越大。当 translog 达到一定长度的时候，就会触发 commit 操作。
commit 操作发生第一步，就是将 buffer 中现有数据 refresh 到 os cache 中去，清空 buffer。然后，将一个 commit point 写入磁盘文件，里面标识着这个 commit point 对应的所有 segment file，
同时强行将 os cache 中目前所有的数据都 fsync 到磁盘文件中去。最后清空 现有 translog 日志文件，重启一个 translog，此时 commit 操作完成。
这个 commit 操作叫做 flush。默认 30 分钟自动执行一次 flush，但如果 translog 过大，也会触发 flush。flush 操作就对应着 commit 的全过程，
可以通过 es api，手动执行 flush 操作，手动将 os cache 中的数据 fsync 强刷到磁盘上去。执行 commit 操作之前，数据要么是停留在 buffer 中，要么是停留在 os cache 中，
无论是 buffer 还是 os cache 都是内存，为了防止因机器死机导致内存中的数据丢失。需要将数据对应的操作写入一个专门的日志文件 translog 中，
一旦此时机器宕机，再次重启的时候，es 会自动读取 translog 日志文件中的数据，恢复到内存 buffer 和 os cache 中去。
translog 其实也是先写入 os cache 的，默认每隔 5 秒刷一次到磁盘中去，所以默认情况下，可能有 5 秒的数据会仅仅停留在 buffer 或者 translog 文件的 os cache 中，
如果此时机器挂了，会丢失 5 秒钟的数据。但是这样性能比较好，最多丢 5 秒的数据。也可以将 translog 设置成每次写操作必须是直接 fsync 到磁盘，但是性能会差很多。
refresh-->es接收数据请求时先存入内存中，默认每隔一秒会从内存buffer中将数据写入filesystem cache，这个过程叫做refresh；
fsync-->translog会每隔5秒或者在一个变更请求完成之后执行一次fsync操作，将translog从缓存刷入磁盘，这个操作比较耗时，如果对数据一致性要求不是跟高时建议将索引改为异步，如果节点宕机时会有5秒数据丢失;
flush-->es默认每隔30分钟会将filesystem cache中的数据刷入磁盘同时清空translog日志文件，这个过程叫做flush。

es删除/更新数据底层原理
如果是删除操作，commit 的时候会生成一个 .del 文件，里面将某个 doc 标识为 deleted 状态，那么搜索的时候根据 .del 文件就知道这个 doc 是否被删除了。
如果是更新操作，就是将原来的 doc 标识为 deleted 状态，然后新写入一条数据。
buffer 每次 refresh 一次，就会产生一个 segment file，所以默认情况下是 1 秒钟一个 segment file，这样下来 segment file 会越来越多，此时会定期执行 merge。
每次 merge 的时候，会将多个 segment file 合并成一个，同时这里会将标识为 deleted 的 doc 给物理删除掉，
然后将新的 segment file 写入磁盘，这里会写一个 commit point，标识所有新的 segment file，然后打开 segment file 供搜索使用，同时删除旧的 segment file。

查看所有索引:http://127.0.0.1:9200/_cat/indices

在kibana中的DevTools菜单模块中键入:
PUT test                                                      ------创建索引,索引名不能包含大写字母
PUT test2                                                     ------指定参数创建索引
{
  "settings": {
    "number_of_shards": 3,
    "number_of_replicas": 1
  }
}
PUT test2/_settings                                           ------修改索引副本数
{
    "number_of_replicas": 2
}
PUT test2/_settings                                           ------指定索引的读写权限
{
    "blocks.read_only": true                                  ------只读
    "blocks.read":true                                        ------禁止读
    "blocks.write":true                                       ------禁止写
}
GET test/_settings                                            ------查看指定索引的配置信息
GET test,test2/_settings                                      ------查看多个索引的配置信息
GET book/book/_mapping                                        ------查看索引的mapping信息
DELETE test                                                   ------删除索引
POST test2/_close                                             ------关闭索引
POST test2/_open                                              ------打开索引
POST _reindex                                                 ------复制索引,目标索引需要先创建
{
    "source":{"index":"test","query":{"term":{"title":"tt"}}},
    "dest":{"index":"test_new"}
}
POST /_aliases                                                ------增加别名
{
    "actions":
        {"add":{"index":"test","alias":"alias1"}}
}
POST /_aliases                                                ------移除别名
{
    "actions":
        {"remove":{"index":"test","alias":"alias1"}}
}
GET /test/_aliases                                            ------查看索引别名
GET /_aliases                                                 ------查看所有索引别名

PUT book/book/1                                               ------向索引book中的类型book添加一个文档，文档的_id=1
{
  "id":1,
  "title":"锋利的jquery",
  "author":"wuming",
  "content":"jquery是javascript的一个框架"
}
POST book/book                                                ------向索引book中的类型book添加一个文档，文档的_id未知
{
  "id":2,
  "title":"solr搜索引擎",
  "author":"wuming",
  "content":"solr是基于lucene开发的一款搜索引擎项目"
}

GET book/book/1                                               ------根据文档_id获取文档
GET book/book/_mget                                           ------根据文档_id数组获取文档
{
   "ids":["1","2","3"]
}
GET book/book/_search                                         ------检索book类型下的文档
GET book/book/_search                                         ------根据分词词元查询,中文分词默认是单个汉字独立的分词
{
  "query": {
    "term": {
      "title": "锋"
    }
  }
}
GET book/book/_search                                         ------match检索，只要存在任何一个词项被匹配，就会搜索出来。
                                                                    这里根据"锋搜"来搜索会将"锋利的jquery","solr搜索引擎"这两个文档都搜索出来
{
  "query": {
    "match": {
      "title": {
        "query": "锋搜"
      }
    }
  }
}
POST book/book/1                                              ------更新文档,如果之前存在文档_id=1的文档，这里将替换旧文档
{
  "id":1,
  "title":"锋利的jquery修正版",
  "author":"wuming",
  "content":"jquery是javascript的一个框架"
}
POST book/book/1/_update                                      ------更新文档的content字段
{
  "script": {
    "source": "ctx._source.content=\"jquery是一个框架\""
  }
}
POST book/book/1/_update                                      ------添加文档的createtime字段，如果已有此字段，其实就是更新
{
  "script": "ctx._source.createtime=\"2018-06-06\""
}
POST book/book/1/_update                                      ------新增一个字段
{
  "script": "ctx._source.new_field=\"col_new\""
}
POST book/book/1/_update                                      ------移除一个字段
{
  "script": "ctx._source.remove(\"createtime\")"
}
POST book/_update_by_query                                    ------根据条件更新文档
{
  "script": {
    "inline":"ctx._source.category=params.category",
    "lang":"painless",
    "params":{"category":"tt"}
  },
  "query":{
    "term":{"titie":"test"}
  }
}

DELETE book/book/1                                            ------删除文档_id=1的文档
POST book/_delete_by_query                                    ------根据条件删除文档
{
  "query":{
    "term":{
       "title":"tt"
    }
  }
}
POST book/book/_delete_by_query                                ------删除所有文档
{
  "query":{
    "match_all":{ }
  }
}

es索引http操作
curl -XPUT localhost:9200/test                                ------创建索引
返回结果:{"acknowledged":true,"shards_acknowledged":true,"index":"test"}

---------------------------------------------------------------------------------------------