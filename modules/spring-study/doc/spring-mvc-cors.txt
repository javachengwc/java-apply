浏览器出于安全考虑，限制了JS发起跨站请求，使用XHR对象发起请求必须遵循同源策略（SOP：Same Origin Policy），跨站请求会被浏览器阻止。
CorsFilter: 过滤器阶段的CORS
  @Bean
  public CorsFilter corsFilter() {
      CorsConfiguration config = new CorsConfiguration();
      config.addAllowedOrigin("*");
      config.setAllowCredentials(true);
      config.addAllowedMethod("*");
      config.addAllowedHeader("*");
      UrlBasedCorsConfigurationSource configSource = new UrlBasedCorsConfigurationSource();
      configSource.registerCorsConfiguration("/**", config);
      return new CorsFilter(configSource);
  }
Spring把CorsInteceptor写死在了拦截器链上的最后一个，
也就是说如果有自定义的Interceptor，请求一旦被拦截器拦截下来，则只能通过CorsFilter授权跨域
CorsInterceptor: 拦截器阶段的CORS
  #WebMvcConfigurer
  @Override
  public void addCorsMappings(CorsRegistry registry) {
      registry.addMapping("/**")
              .allowCredentials(true)
              .allowedHeaders("*")
              .allowedOrigins("*")
              .allowedMethods("*");
  }

@CrossOrigin：Handler阶段的CORS
  @CrossOrigin(origins = "http://localhost")
  @RequestMapping(method = RequestMethod.GET)
  List<Integer> list() {
      return new ArrayList<Integer>();
  }

三个阶段的CORS配置顺序是后面叠加到前面，而不是后面完全覆盖前面的