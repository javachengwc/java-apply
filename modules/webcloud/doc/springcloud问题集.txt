------------------------------springcloud问题集--------------------------------
1,服务节点变化(新增或关闭)的感知延迟
当新增或关闭一个服务节点，调用方一般要隔个半分钟才能感知服务节点的变化
假设现在有调用方client1和服务节点service1, 当service1异常关闭后,client1去调用,会提示错误.
service1正常启动后,此时,client1并不会立刻知道service1已经启动,需要等待一定时间才能知道。
这里面涉及2个定时任务，EurekaClient的定时任务(com.netflix.discovery.DiscoveryClient.refreshRegistry()),
另一个是Ribbon的定时任务(com.netflix.loadbalancer.PollingServerListUpdater.start()) .
EurekaClient的定时任务是从注册中心获取最新的service list.
eureka.client.registry-fetch-interval-seconds 这个值就是Eureka Client 定时向 Eureka Server 获取 服务列表的间隔.
Ribbon的定时任务是获取EurekaClient中最新的的service list.  ribbon.ServerListRefreshInterval这个值是其间隔时间.
当一个服务调用另一个服务的时候, Ribbon会缓存请求和 service list.通过定时任务PollingServerListUpdater
更新最新的service list,上面的等待时间一部分就是等待updateListOfServers 定时任务执行,它执行的时候,就会更新service list.

2,eureka服务端不剔除已关停的节点
某服务已关闭，但在注册中心，该服务却一直存在，且为UP状态，
在大约十分钟后，出现一行红色大字：EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ...
原因：自我保护机制。Eureka Server在运行期间，会统计心跳失败的比例在15分钟之内是否低于85%，
如果出现低于的情况（在单机调试的时候很容易满足，实际在生产环境上通常是由于网络不稳定导致），
Eureka Server会将当前的实例注册信息保护起来，同时提示这个警告。
解决方法:关闭自我保护,
eureka.server.enable-self-preservation=false
eureka.server.eviction-interval-timer-in-ms=20000

3,项目中同时存在spring cloud Feign 与 swagger2 时，导致feign注入失败，报错:
FactoryBean threw exception on object creation; nested exception is java.lang.NullPointerException
原因是:swagger2的版本太低了，调整成2.5及之上版本就行
-------------------------------------------------------------------------------