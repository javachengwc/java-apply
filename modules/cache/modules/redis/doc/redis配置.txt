redis命令行中查看配置
config get maxclients                     ------查看最大连接数
config get save                           ------查看redis持久化配置
config get protected-mode                 ------查看保护模式是否开启
config get tcp-keepalive
config get timeout
config get loglevel                       ------查看日志级别
config get stop-writes-on-bgsave-error    ------当rdb持久化出错后，是否停止工作
config get maxmemory-policy
config get maxmemory                      ------查看redis设置的最大内存
config get slave-serve-stale-data         ------当从库同主机失去连接或者复制正在进行，从库是否继续响应客户端的请求
命令行中设置配置，使用 config set key value即可。
------------------------------------------------

redis如果不指定配置文件，redis也可以启动，此时，redis使用默认的内置配置。
不过在正式环境，常常通过配置文件redis.conf来配置redis

redis.conf配置参数：
1）daemonize on|yes
redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes时，启用守护进程
启动Redis后，在命令行里不断跳各种日志，即便通过“&”，让其后台运行，也无济于事，这就需要此参数以Daemo模式运行

2）pidfile /var/run/redis_6379.pid
redis以守护进程方式运行时，系统默认会把pid写入/var/run/redis.pid，可以通过pidfile指定pid文件

3）port 6379
redis默认监听6379端口，可以通过port指定redis要监听的端口

4）bind 127.0.0.1
绑定主机地址

5）unixsocket /tmp/redis.sock
指定redis监听的unix socket 路径

6）timeout 300
当客户端闲置多长时间，关闭连接，单位秒

7）loglevel verbose|debug|notice|warning
指定日志记录级别，默认是verbose

8）logfile /var/log/redis_6379.log
日志记录文件，默认是标准输出stdout，如果redis以守护进程方式运行，logfile 配置为stdout时，logs将要输出到/dev/null

9)syslog-enabled no|yes
当配置为yes时，日志输出到系统日志，默认是no

10）syslog-ident redis
指定syslog的标示符

11）syslog-facility local0
指定syslog设备(facility)，必须是user或则local0到local7

12）databases 16
设置redis中数据库的个数，默认数据库是DB 0，可以通过select <dbid>，选择使用的数据库。dbis大于等于0，小于等于databases -1

13）save <seconds> <changes>
rdb持久化策略，指定多长时间内，有多少次更新操作时，将数据同步到数据库文件，可以多个条件配合，
ep:save 60 1000 #当时间间隔超过60秒，存储超过1000条记录时，进行持久化。
    save 900 1 #900秒 1个修改
    save 300 10 #300秒 10个更新
    save 60 10000<span style="white-space:pre"> </span>#60秒 10000个更新
注意，如果不做rdb持久化，注释掉save即可。

14）rdbcompression yes|no
rdb持久化中,快照过大情况下是否压缩数据，系统默认是yes

15）dbfilename dump.rdb
指定rdb持久化的文件名，默认是dump.rdb

16）dir /var/lib/redis/6379
指定本地数据库存放目录

17）slaveof <masterip> <masterport>
当本机是slave服务时，设置master服务的ip和端口
ep:slaveof 192.168.133.139 6379

18）masterauth <master-password>
当master服务设置了密码时，slave服务连接master的密码。如果配置不对，slave服务请求将被拒绝

19）slave-serve-stale-data yes|no
当slave和master之间的连接断开或slave正在于master同步时，如果有slave请求，
当slave-serve-stale-data配置为yes时，slave可以响应客户端请求；当为no时，slave将要响应错误，默认是yes

20）requirepass foobared
设置redis连接密码

21）maxclients 128
设置同一时间客户端最大连接数，默认是无限制。如果设置maxclients 0 时，表示不限制

22）maxmemory <bytes>
指定redis最大内存限制，redis在启动时，会把数据加载到内存中，达到最大内存后，redis会先清除已到期或将过期的key，
仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读操作。
切记，一定要设定maxmemmory，且配置大小要小于物理内存，留有足够的内存供系统使用
如果不设此值，如果期间数据暴涨，导致内存吃紧，SWAP加剧，会直接宕机。

23）maxmemory-policy
内存淘汰策略,当redis使用内存达到最大时，使用哪种策略移除内存中数据
noeviction        当内存使用达到阈值的时候，所有引起申请内存的命令会报错。
allkeys-lru       在主键空间中，优先移除最近未使用的key。
volatile-lru      在设置了过期时间的键空间中，优先移除最近未使用的key。
allkeys-random    在主键空间中，随机移除某个key。
volatile-random   在设置了过期时间的键空间中，随机移除某个key。
volatile-ttl      在设置了过期时间的键空间中，具有更早过期时间的key优先移除。

24）appendonly no|yes
是否开启AOF持久化

25）appendfilename appendonly.aof
指定AOF日志文件名，默认为appendonly.aof

26）appendfsync everysec|no|aways
指定AOF持久化策略，
no表示等操作系统进行数据缓存同步到磁盘的aof文件（快）
always表示每次更新操作后手动调用fsync将数据写到磁盘的aof文件（慢，安全）
everysec表示每秒同步一次（拆中，默认值）

no-appendfsync-on-rewrite no|yes
在日志重写时，不进行命令追加操作，而只是将其放在缓冲区里，避免与命令的追加造成DISK IO上的冲突。
设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入，默认为no，建议yes

auto-aof-rewrite-percentage 100
表示（aof_current_size- aof_base_size） / aof_base_size 的比值。aof文件重写之后当前文件大小增长多少就触发重写。
当前aof文件大小是上次日志重写得到aof文件大小的2倍时，自动启动新的日志重写过程。
自动触发时机 : aof_current_size>auto-aof-rewrite-min-size &&
(aof_current_size - aof_base_size) / aof_base_size >= auto-aof-rewrite-percentage

auto-aof-rewrite-min-size 64mb
当前aof文件启动新的日志重写过程的最小值，避免刚刚启动reids时由于文件尺寸较小导致频繁的重写。

27）slowlog-log-slower-than 10000
配置记录慢日志的条件，单位是微妙，当是负值时，关闭慢日志记录，当是0时，记录所有操作

28）slowlog-max-len 1024
配置记录慢查询的最大条数

29）hash-max-ziplist-entries 512
当hash中的数据项（即field-value对）的数目超过512时，也就是ziplist数据项超过1024时，hash内部实现从ziplist变成dict

30）hash-max-ziplist-value 64
当hash中插入的任意一个value的长度超过了64时，hash内部实现从ziplist变成dict

31）activerehashing yes
是否重置Hash表
设置成yes后redis将每100毫秒使用1毫秒CPU时间来对redis的hash表重新hash，可降低内存的使用
当使用场景有较为严格的实时性需求,不能接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。
如果没有这么严格的实时性要求,可以设置为 yes,以便能够尽可能快的释放内存

32）aof-rewrite-incremental-fsync yes
当一个子进程要改写AOF文件，如果以下选项启用，那文件将会在每产生32MB数据时进行同步，这样提交增量文件到磁盘时可以避免出现比较大的延迟

33）hz 10
redis使用一个内部程序来处理后台任务，例如关闭超时的client连接，清除过期的key等等。
它并不会同时处理所有的任务，redis通过指定的hz参数去检查和执行任务。
hz默认设为10，表示每秒运行10次，提高它的值将会占用更多的cpu，当然相应的redis将会更快的处理同时到期的许多key，以及更精确的去处理超时。
hz的取值范围是1~500，通常不建议超过100，只有在请求延时非常低的情况下可以将值提升到100。

34）client-output-buffer-limit <class><hard limit><soft limit><soft seconds>
因为某些原因，client不能足够快的从server读取数据，
那client的输出缓存限制可能会使client失连，这个限制可用于3种不同的client种类，分别是：normal、slave和pubsub。
如果达到hard limit那client将会立即失连。
如果达到soft limit那client将会在soft seconds秒之后失连。
参数soft limit < hard limit。
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60
----------------------------------------