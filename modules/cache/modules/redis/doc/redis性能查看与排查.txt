-------------------------------------redis性能查看与排查---------------------------------
通过redis-cli访问redis服务器，用info命令查看redis服务信息
info memory                       -----返回与内存相关的信息
    used_memory                   -----redis分配的内存总量，以字节（byte）为单位。它包含了实际缓存占用的内存和Redis自身运行所占用的内存(如元数据、lua)。
    used_memory_human             -----数据和used_memory是一样的值，它以M为单位显示。
    used_memory_rss               -----从操作系统上显示已经分配的内存总量。表示该进程所占物理内存的大小，是操作系统分配给Redis实例的内存大小。
                                       除了用户定义的数据和内部开销以外，used_memory_rss指标还包含了内存碎片的开销
    used_memory_peak              -----过去redis内存使用的峰值
    mem_fragmentation_ratio       -----内存碎片率。mem_fragmentation_ratio=used_memory_rss/used_memory
    used_memory_lua               -----lua脚本引擎所使用的内存大小。
    mem_allocator                 -----编译时指定的redis使用的内存分配器，可以是libc、jemalloc、tcmalloc、dlmalloc等。
info stats                        -----返回redis汇总相关信息
    total_commands_processed      -----redis服务处理的命令总数
    evicted_keys                  -----因为maxmemory限制导致key被回收删除的数量.
info commandstats                 -----查看redis命令统计信息
info clients                      -----查看所有客户端连接信息
    connected_clients             -----连接的客户端数量
client list                       -----连接的客户端列表
    addr                          -----客户端的地址和端口
    fd                            -----套接字所使用的文件描述符
    idle                          -----以秒计算的空闲时长
    flags                         -----客户端 flag
    db                            -----该客户端正在使用的数据库 ID
    sub                           -----已订阅频道的数量
    psub                          -----已订阅模式的数量
    multi                         -----在事务中被执行的命令数量
    qbuf                          -----查询缓冲区的长度（字节为单位，0 表示没有分配查询缓冲区）
    qbuf-free                     -----查询缓冲区剩余空间的长度（字节为单位，0 表示没有剩余空间）
    obl                           -----输出缓冲区的长度（字节为单位，0 表示没有分配输出缓冲区）
    oll                           -----输出列表包含的对象数量
    omem                          -----输出缓冲区和输出列表占用的内存总量
    events                        -----文件描述符事件
    cmd                           -----最近一次执行的命令
monitor                           -----实时监控redis执行的命令
---------------------------------------------------
redis内存使用率
如果redis的内存使用超过可用最大内存，那么操作系统开始进行内存与swap空间交换，把内存中旧的或不再使用的内容写入硬盘上（硬盘上的这块空间叫Swap分区），
以便腾出新的物理内存给新页或活动页(page)使用。如果redis进程上发生内存交换，那么redis和依赖redis上数据的应用会受到严重的性能影响。
如果redis没有开启rdb快照或aof持久化策略，那么缓存数据在redis崩溃时就有丢失的危险。因为当redis内存使用率超过可用内存的95%时，部分数据开始在内存与swap空间来回交换，这时就可能有丢失数据的危险。
如果开启并触发快照功能时，redis会fork一个子进程把当前内存中的数据完全复制一份写入到硬盘上。因此若是当前使用内存超过可用内存的45%时触发快照功能，
那么此时进行的内存交换可能会丢失数据。如果在这个时候实例上有大量频繁的更新操作，问题会变得更加严重。
减少redis内存占用率的方式如下:
1,设置key的过期时间以及回收key
用redis过期时间命令(expire,expireat, pexpire, pexpireat)去设置过期时间，在key过期时自动删除key。
假如知道每秒钟有多少个新key-value被创建，那可以调整key的存活时间，并指定阀值去限制redis使用的最大内存。
当内存使用达到设置的最大阀值时，就会使用配置的回收策略回收key,redis.conf配置文件maxmemory-policy属性值设置回收策略。
一般设置为“allkeys-lru”，它允许Redis从整个数据集中挑选最近最少使用的key进行删除(LRU淘汰算法)。
2,设置redis最大使用的内存
在配置文件redis.conf中设置“maxmemory”属性的值可以限制Redis最大使用的内存，修改后重启实例生效。
也可以使用客户端命令config set maxmemory 去修改值，这个命令是立即生效的，但会在重启后会失效，需要使用config rewrite命令去刷新配置文件。
若是启用了redis快照功能，应该设置“maxmemory”值为系统可使用内存的45%，因为快照时需要一倍的内存来复制整个数据集，也就是说如果当前已使用45%，
在快照期间会变成95%(45%+45%+5%)，其中5%是预留给其他的开销。 如果没开启快照功能，maxmemory最高能设置为系统可用内存的95%。
--------------------------------------------------
redis内存碎片率
redis内存碎片率稍大于1是合理的，这个值表示内存碎片率比较低，也说明redis没有发生内存交换。
但如果内存碎片率超过1.5，那就说明Redis消耗了实际需要物理内存的150%，其中50%是内存碎片率。
若是内存碎片率低于1的话，说明redis内存分配超出了物理内存，操作系统正在进行内存交换。内存交换会引起非常明显的响应延迟。
分析解决内存碎片率过高或过低的方式有以下几种方式
1,重启Redis服务器
如果内存碎片率超过1.5，重启redis服务器可以让额外产生的内存碎片失效并重新作为新内存来使用，使操作系统恢复高效的内存管理。
2,限制内存交换
如果内存碎片率低于1，redis可能会把部分数据交换到硬盘上。应该增加可用物理内存或减少redis内存占用。
3.修改内存分配器：
redis支持malloc、jemalloc11、tcmalloc几种不同的内存分配器，每个分配器在内存分配和碎片上都有不同的实现。
--------------------------------------------------
redis延迟
redis的延迟数据是无法从info信息中获取的。要查看延迟时间，可以用 Redis-cli工具加--latency参数运行
Redis-cli --latency -h 127.0.0.1 -p 6379
如果延迟是时间过长，成为redis的一个性能问题时，有以下几个办法分析解决性能问题。
1,使用slowlog查出引发延迟的慢命令
默认情况下命令若是执行时间超过10ms就会被记录到日志。slowlog只会记录其命令执行的时间，不包含io往返操作，也不记录单由网络延迟引起的响应慢。
通常1gb带宽的网络延迟，预期在200μs左右，如果一个命令仅执行时间就超过10ms，那比网络延迟慢了近50倍。
slowlog get命令,返回结果的第三个字段以微妙位单位显示命令的执行时间。如只需查看最后10个慢命令，输入slowlog get 10 即可。
如要自己定义慢执行的标准，config set slowlog-log-slower-than 3000 设置慢执行为3000微妙，也可在redis.config中进行配置。
2,监控客户端链接
redis是单线程模型(使用单核)处理所有客户端的请求， 由于客户端连接数的增长，处理请求的线程资源开始降低分配给单个客户端连接的处理时间，
这时每个客户端需要花费更多的时间去等待redis共享服务的响应。redis默认允许客户端连接的最大数量是10000。若连接数超过5000以上，那可能会影响Redis的性能。
info clients       -----查看客户端连接信息
自redis2.6以后，允许在配置文件(redis.conf)maxclients属性上修改客户端连接的最大数，也可以通过redis-cli工具上输入config set maxclients设置最大连接数。
redis默认允许客户端连接的最大数量是10000。
3,加强内存管理
较少的内存会引起redis延迟时间增加。如果Redis占用内存超出系统可用内存，操作系统会把redis的部分数据，从内存交换到硬盘上，内存交换会明显的增加延迟时间。
4,性能数据指标
分析解决redis性能问题，需要把延迟时间的数据变化与其他性能指标的变化相关联起来。
命令处理总数下降的发生可能是由慢命令阻塞了整个系统，但如果命令处理总数的增加，同时内存使用率也增加，那么就可能是由于内存交换引起的性能问题。
对于性能指标相关联的分析，需要从历史数据上来观察到数据指标的变化，此外还可以观察单个性能指标相关联的所有其他性能指标信息。
这些数据可以在redis上收集，周期性的调用内容为redis info的脚本，然后分析输出的信息，记录到日志文件中。
当延迟发生变化时，用日志文件配合其他数据指标，把数据串联起来排查定位问题。
-----------------------------------------------------------------------------------------