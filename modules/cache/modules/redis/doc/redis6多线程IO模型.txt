在redis6.0版本中，支持多线程IO,默认是关闭的，如果需要使用多线程，需要在redis.conf中设置：
1,设置io-thread-do-reads配置项为yes，表示启动多线程。
2,设置线程个数。官方的建议是如果为 4 核的 CPU，建议线程数设置为 2 或 3，
  如果为 8 核 CPU 建议线程数设置为 6，线程数要小于机器核数，并不是越大越好。

在redis 6.0中新增了多线程的功能来提高 I/O 的读写性能，它的主要实现思路是将主线程的 IO 读写任务
拆分给一组独立的线程去执行，这样就可以使多个 socket 的读写可以并行化了，
I/O 的读和写本身是堵塞的，比如当 socket 中有数据时，redis 会通过调用先将数据从内核态空间拷贝到用户态空间，
再交给 redis 调用，而这个拷贝的过程就是阻塞的，当数据量越大时拷贝所需要的时间就越多。
采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络IO的时间消耗），
将最耗时的Socket的读取、请求解析、写入单独外包出去，
剩下的命令执行仍然由主线程串行执行并和内存的数据交互。
这样网络IO操作就变成多线程化了，其他核心部分仍然是线程安全的。
I/O 多路复用是经典的Reactor设计模式，通过监测文件的读写事件再通知线程执行相关操作。
多路指的是多个socket连接，复用指的是复用一个线程。采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求。


