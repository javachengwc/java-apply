babel是一个广泛使用的转码器，是ES6高级语法向低版本语法兼容的工具，可以将ES6代码转为ES5代码，从而在现有环境执行。
babel可以将ECMAScript 2015+代码转换为向后兼容的javascript版本，以实现在当前和较旧的浏览器或环境中的运行。
babel支持最新版本的javascript语法，对于尚未被浏览器支持的语法，可以通过babel插件进行支持。
babel的配置文件是.babelrc，存放在项目的根目录下。使用babel的第一步，就是配置这个文件。
.babelrc文件用来设置转码规则和插件，基本格式如下:
    {
      "presets": [],
      "plugins": []
    }
presets字段设定转码规则，官方提供以下的规则集
    npm install --save-dev babel-preset-es2015            ###ES2015转码规则
    npm install --save-dev babel-preset-react             ###react转码规则
    npm install --save-dev babel-preset-stage-0           ###ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个
    npm install --save-dev babel-preset-stage-1
    npm install --save-dev babel-preset-stage-2
    npm install --save-dev babel-preset-stage-3

babel 总共分为三个阶段：解析，转换，生成。
babel本身不具有任何转化功能，它把转化的功能都分解到一个个plugin里面。
因此当不配置任何插件时，经过babel的代码和输入是相同的。
当添加语法插件之后，在解析这一步就使得babel能够解析更多的语法。
使用babel插件首先需安装插件，npm install babel-plugin-xxx 进行安装
然后配置此插件插件,将插件的名字增加到配置文件中 (根目录下创建 .babelrc 或者 package.json 的 babel 里面，格式相同)
比如.babelrc
     {
        "presets": ["es2015","react", "stage-2"],
        "plugins": ['babel-plugin-module-resolver',
            {
                alias: {
                  components: './src/components',
                },
            }
        ]
      }

babel提供babel-cli工具，用于命令行转码
npm install --global babel-cli                            ###安装babel-cli
babel example.js --out-file out.js  或
babel example.js -o out.js                                ###转码结果写入out.js
babel src -d lib  -s                                      ###整个目录转码,-s参数生成source map文件

babel-cli工具自带一个babel-node命令，提供一个支持ES6的REPL环境。
babel-register模块改写require命令，为它加上一个钩子。   npm install --save-dev babel-register
babel-core模块,如果某些代码需要调用Babel的API进行转码,就需要使用babel-core模块，npm install babel-core --save
babel-polyfill模块,npm install --save babel-polyfill
babel默认只转换新的JavaScript句法（syntax），而不转换新的API，
比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。
比如ES6在Array对象上新增了Array.from方法。babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。
babel-polyfill 主要有两个缺点：
    1,babel-polyfill 会导致打出来的包非常大，因为 babel-polyfill 是一个整体，把所有方法都加到原型链上。
    2,babel-polyfill 会污染全局变量，给很多类的原型链上都作了修改
因此在实际使用中，通常会倾向于使用 babel-plugin-transform-runtime。
但如果代码中包含高版本 js 中类型的实例方法 (例如 [1,2,3].includes(1))，还是要使用 polyfill。

许多工具需要Babel进行前置转码,比如ESLint
ESLint 用于静态检查代码的语法和风格，npm install --save-dev eslint babel-eslint
然后，在项目根目录下，新建一个配置文件.eslint
{
  "parser": "babel-eslint",
  "rules": {
    ...
  }
}


