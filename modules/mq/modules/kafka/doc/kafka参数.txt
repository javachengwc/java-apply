############################# System #############################
##唯一标识在集群中的ID，要求是正数。在改变IP地址，不改变broker.id的话不会影响consumers
broker.id=0
##服务端口，默认9092
port=9092
##broker的主机地址，若是设置了，那么会绑定到这个地址上，
##若是没有，会绑定到所有的接口上，并将其中之一发送到ZK，一般不设置
host.name=debugo01

##broker处理消息的最大线程数
num.network.threads=2
##broker处理磁盘I/O的线程数
num.io.threads=8
##一些后台任务处理的线程数，例如过期消息文件的删除等
background.threads = 4
##等待IO线程处理的请求队列最大数，若是等待IO的请求超过这个数值，那么会停止接受外部消息
queued.max.requests = 500

##socket的发送缓冲区（SO_SNDBUF）
socket.send.buffer.bytes=1048576
##socket的接收缓冲区 (SO_RCVBUF)
socket.receive.buffer.bytes=1048576
##socket请求中可以接收的最大字节数。默认100m，为了防止内存溢出，message.max.bytes必须要小于它
socket.request.max.bytes = 104857600

############################# Topic #############################
# 每个topic的分区个数，更多的partition会产生更多的segment file
num.partitions=2
# 是否允许自动创建topic ，若是false，就需要通过命令创建topic
auto.create.topics.enable =true
# 一个topic ，默认分区的replication个数 ，不能大于集群中broker的个数。
default.replication.factor =1
# Kafka broker接收的最大消息的大小，单位是字节，默认值约1MB，如果消息的大小超过了这个限制，那么在发送消息时会导致失败。
message.max.bytes = 1000000

部分配置是可以被每个topic自身的配置所代替，例如
新增配置
bin/kafka-topics.sh --zookeeper localhost:2181 --create --topic my-topic --partitions 1 --replication-factor 1 --config max.message.bytes=64000 --config flush.messages=1
修改配置
bin/kafka-topics.sh --zookeeper localhost:2181 --alter --topic my-topic --config max.message.bytes=128000
删除配置 ：
bin/kafka-topics.sh --zookeeper localhost:2181 --alter --topic my-topic --deleteConfig max.message.bytes

############################# ZooKeeper #############################
##zookeeper集群的地址，可以是多个，多个之间用逗号分割
zookeeper.connect=aa:2181,bb:2181
##zooKeeper的会话超时时间，就是心跳的间隔
zookeeper.session.timeout.ms=6000
##zooKeeper的连接超时时间
zookeeper.connection.timeout.ms=6000
#zooKeeper集群中leader和follower之间的同步实际
zookeeper.sync.time.ms = 2000

############################# Log #############################
#kafka数据的存放地址，多个地址的话用逗号分割 /tmp/kafka-logs-1，/tmp/kafka-logs-2
log.dirs=/var/log/kafka

# 当达到下面的消息数量时，会将数据flush到日志文件中。默认10000
#log.flush.interval.messages=10000
# 当达到下面的时间(ms)时，执行一次强制的flush操作。interval.ms和interval.messages无论哪个达到，都会flush。默认3000ms
#log.flush.interval.ms=1000
# 检查是否需要将日志flush的时间间隔
log.flush.scheduler.interval.ms = 3000

# 用于启用或禁用日志清理功能的开关，默认true
log.cleaner.enable=true
## 日志清理的线程数
log.cleaner.threads =1
# 日志清理策略（delete|compact），delete是默认清楚策略
log.cleanup.policy = delete
# 日志保存时间 (hours|minutes)，默认为7天（168小时）。超过这个时间会根据policy处理数据。bytes和minutes无论哪个先达到都会触发。
log.retention.hours=168
# 单个分区中日志数据的最大字节数。默认值为 -1，表示没有大小限制。超过这个数据量会根据policy处理数据。
#log.retention.bytes=1073741824

# 控制日志segment文件的大小，默认为1G，超出该大小则追加到一个新的日志segment文件中（-1表示没有限制）
# 在 Kafka 中，日志文件会被切分成多个日志段（segment），以便于管理和清理。
log.segment.bytes=1024 * 1024 * 1024
# 配置日志滚动周期时间的参数，单位为小时‌，当达到指定的时间周期时，Kafka 会强制生成一个新的日志段segment。
log.roll.hours = 24*7
##日志片段文件的检查周期，默认5分钟，查看是否达到了删除策略的设置（log.retention.hours或log.retention.bytes）
log.retention.check.interval.ms=300000

# 日志索引文件最大大小
# 在Kafka 中，每个分区（partition）的日志数据都会被分割成多个段（segment），每个段包含一个日志数据文件和一个索引文件。
# 索引文件用于快速定位日志数据文件中的记录，从而提高数据检索的效率。
# log.index.size.max.bytes 参数就是用来设置这些索引文件的最大大小的。
log.index.size.max.bytes = 10 * 1024 * 1024
# 配置Kafka写入索引文件的频率，默认4kb。
# 每当Kafka向日志数据文件中写入了指定大小（即 log.index.interval.bytes 的值）的日志时，
# 它会在索引文件中记录一个索引项。这个索引项用于快速定位日志数据文件中的记录，从而提高数据检索的效率。
log.index.interval.bytes = 4096

## 日志压缩时候处理的最大大小
log.cleaner.io.max.bytes.per.second=None
## 日志压缩去重时候的缓存空间 ，在空间允许的情况下，越大越好
log.cleaner.dedupe.buffer.size=500*1024*1024
## 日志清理时候用到的IO块大小 一般不需要修改
log.cleaner.io.buffer.size=512*1024
## 日志清理中hash表的扩大因子 一般不需要修改
log.cleaner.io.buffer.load.factor = 0.9
## 检查是否进行日志清理的间隔
log.cleaner.backoff.ms =15000
## 日志清理的频率控制，越大意味着更高效的清理，同时会存在一些空间上的浪费，会被topic创建时的指定参数覆盖
log.cleaner.min.cleanable.ratio=0.5
# 此参数主要用于日志压缩场景中，当Kafka使用日志压缩策略（Log Compaction）时，它会保留每个 key 的最新值，并删除旧的值。
# log.cleaner.delete.retention.ms 参数就是用来设置这些标记在日志中保留的时间，默认1天
log.cleaner.delete.retention.ms = 86400000

############################# replica #############################
# 设置控制器（controller）与 broker 之间进行通信时的 socket 超时时间
# 控制器（controller）是 Kafka 集群中的一个特殊 broker，负责管理和监控集群的状态。
controller.socket.timeout.ms = 30000
# controller-to-broker-channels消息队列的尺寸大小
controller.message.queue.size=10
# 是否允许控制器关闭broker ,若是设置为true,会关闭所有在这个broker上的leader，并转移到其他broker
controlled.shutdown.enable = false
# 控制器关闭的尝试次数
controlled.shutdown.max.retries = 3
# 每次关闭尝试的时间间隔
controlled.shutdown.retry.backoff.ms = 5000

##replicas响应partition leader的最长等待时间，默认10秒。
##若是超过这个时间，则认为该follower副本已经失效，会被踢出ISR集合
replica.lag.time.max.ms = 10000
## 在 Kafka 0.10.0 及之前的版本中,定义如果某个副本落后超过指定的消息数量，则该副本将被视为不同步。
## 从 Kafka 0.10.0 版本开始，这个参数被正式移除
replica.lag.max.messages = 4000

#leader与relicas的socket超时时间
replica.socket.timeout.ms= 30 * 1000
# leader复制的socket缓存大小
replica.socket.receive.buffer.bytes=64 * 1024
# replicas每次获取数据的最大字节数
replica.fetch.max.bytes = 1024 * 1024
# replicas同leader之间通信的最大等待时间，失败了会重试
replica.fetch.wait.max.ms = 500
# 每一个fetch操作的最小数据尺寸,如果leader中尚未同步的数据不足此值,将会等待直到数据达到这个大小
replica.fetch.min.bytes =1
# leader中进行复制的线程数，增大这个数值会增加relipca的IO
num.replica.fetchers = 1
# 每个replica检查将最高水位进行flush的时间间隔
replica.high.watermark.checkpoint.interval.ms = 5000

# 是否自动平衡broker之间的分配策略
auto.leader.rebalance.enable = false
# leader的不平衡比例，若是超过这个数值，会对分区进行重新的平衡
leader.imbalance.per.broker.percentage = 10
# 检查leader是否不平衡的时间间隔
leader.imbalance.check.interval.seconds = 300
# 用于限制消费者提交的偏移量元数据（offset metadata）的最大字节数‌,默认值是 4096（即 4KB）。
offset.metadata.max.bytes = 4096

#############################Consumer #############################
# Consumer端核心的配置是group.id、zookeeper.connect
# consumer归属的组ID
group.id
# 消费者的ID，若是没有设置的话，会自增
consumer.id
# 一个用于跟踪调查的ID ，最好同group.id相同
client.id = <group_id>
# 对于zookeeper集群的指定，必须和broker使用同样的zk配置
zookeeper.connect=aa:2182,bb:2182,cc:2182
# zookeeper的心跳超时时间，超过这个时间就认为是无效的消费者
zookeeper.session.timeout.ms = 6000
# zookeeper的等待连接时间
zookeeper.connection.timeout.ms = 6000
# zookeeper的follower同leader的同步时间
zookeeper.sync.time.ms = 2000

# 当zookeeper中没有初始的offset时，取值latest--从最新产生的消息开始消费 / earliest--从最早的消息开始消费
# 在有已提交的offset记录的情况下，earliest和latest的行为相同，都会从提交的offset处继续消费‌
auto.offset.reset = latest

# socket的超时时间，实际的超时时间为max.fetch.wait + socket.timeout.ms.
socket.timeout.ms= 30 * 1000
# socket的接收缓存空间大小
socket.receive.buffer.bytes=64 * 1024
#消费者每次从 Kafka 分区中提取消息的最大字节数‌，默认值通常是 1MB
fetch.message.max.bytes = 1024 * 1024

# ###提交方式，true--自动提交，consumer会周期性的把当前消费的offset值保存到zookeeper。false--手动提交
auto.commit.enable = true
# 自动提交的时间间隔，默认5秒钟
auto.commit.interval.ms = 5 * 1000

# 消费者内部缓存拉回来的消息到一个队列中的最大块数‌，每个块可以等同于fetch.message.max.bytes中数值
queued.max.message.chunks = 2
## 当有新的consumer加入到group时,将会reblance,此后将会有partitions的消费端迁移到新
## 的consumer上,如果一个consumer获得了某个partition的消费权限,那么它将会向zk注册
## "Partition Owner registry"节点信息,但是有可能此时旧的consumer尚没有释放此节点,
## 此值用于控制,注册节点的重试次数.
 rebalance.max.retries = 4
# 每次reblance的时间间隔
rebalance.backoff.ms = 2000
# 每次重新选举leader的时间
refresh.leader.backoff.ms
# 消费者在一次拉取请求中能从 Kafka 中拉取的最小数据量，若是不满足这个数值则会等待直到满足指定大小。默认为1表示立即接收。
fetch.min.bytes = 1
# 若是不满足fetch.min.bytes时，等待消费端请求的最长等待时间
fetch.wait.max.ms = 100

#############################Producer#############################
# 核心的配置包括：
# metadata.broker.list
# request.required.acks
# producer.type
# serializer.class

# 消费者获取消息元信息(topics, partitions and replicas)的地址,配置格式是：host1:port1,host2:port2，也可以在外面设置一个vip
metadata.broker.list

#消息的确认模式
# 0：不保证消息的到达确认，只管发送，低延迟但是会出现消息的丢失，在某个server失败的情况下，有点像TCP
# 1：发送消息，并会等待leader 收到确认后，一定的可靠性
# -1：发送消息，等待leader收到确认，并进行复制操作后，才返回，最高的可靠性
request.required.acks = 0

# 消息发送的最长等待时间
request.timeout.ms = 10000
# 发送数据时使用的TCP发送缓冲区（SO_SNDBUF）的大小，默认值为131072字节=128KB
send.buffer.bytes=100*1024
# key的序列化方式，若是没有设置，同serializer.class
key.serializer.class
# 分区的策略，默认是取模
partitioner.class=kafka.producer.DefaultPartitioner
# 消息的压缩模式，默认是none，可以有gzip和snappy
compression.codec = none
# 可以针对特定的topic进行压缩
compressed.topics=null
# 消息发送失败后的重试次数
message.send.max.retries = 3
# 每次失败后的间隔时间
retry.backoff.ms = 100
# Kafka 生产者每隔多久时间（以毫秒为单位）会主动获取一次主题的元数据，默认值是 600000 毫秒（即 10 分钟）
topic.metadata.refresh.interval.ms = 600 * 1000
# 用户随意指定，但是不能重复，主要用于跟踪记录消息
client.id=""

---------------老版本的配置，现已弃用-----------------------------------------
## 【弃用】生产者的类型 async:异步执行消息的发送 sync：同步执行消息的发送
## 在较新版本的 Kafka 中已经不再使用，其默认行为已经统一为异步发送模式‌
producer.type=sync

## 【弃用】异步模式下，那么就会在设置的时间缓存消息，并一次性发送
## 在较新版本的 Kafka 中，queue.buffering.max.ms 参数已经被弃用
queue.buffering.max.ms = 5000

## 【弃用】异步的模式下 最长等待的消息数量
## 在较新版本的Kafka 中，此参数已经被弃用
queue.buffering.max.messages = 10000

## 【弃用】异步模式下，设置生产者向队列中添加消息时的阻塞等待时间
## 当生产者向 Kafka 发送消息时，如果消息队列已满（达到了 queue.buffering.max.messages 设置的限制），
## 生产者会根据 queue.enqueue.timeout.ms 参数的值来决定是否阻塞等待队列有空位。
## 如果 queue.enqueue.timeout.ms 设置为 0，当消息队列满时，生产者不会阻塞等待，而是会直接丢弃新的消息‌。
## 如果 queue.enqueue.timeout.ms 设置为一个正数，当消息队列满时，生产者会阻塞等待指定的时间（以毫秒为单位）。
## 如果在这段时间内队列中有空位，生产者会将新消息添加到队列中；如果等待时间超时队列仍然无空位，生产者则会丢弃新的消息‌。
## 如果 queue.enqueue.timeout.ms 设置为 -1，当消息队列满时，生产者会无限期地阻塞等待，直到队列中有空位可以添加新消息为止‌。
queue.enqueue.timeout.ms = -1

## 【弃用】消息体的序列化处理类 ，转化为字节流进行传输
## 在较新版本的 Kafka 中，通常使用 key.serializer 和 value.serializer 参数来分别指定键和值的序列化器类
serializer.class = kafka.serializer.DefaultEncoder
---------------------------------------------------------------------------------------------------------