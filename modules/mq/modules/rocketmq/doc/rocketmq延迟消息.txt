RocketMQ延时消息是当消息写入到Broker后，不能立刻被消费者消费，需要等待指定的时长后才可被消费处理的消息。
定时消息和延时消息本质相同，都是服务端根据消息设置的定时时间在某一固定时刻将消息投递给消费者消费。
RocketMQ延时消息的实现方式主要有两种，一种是通过设置消息的延时级别来实现，另一种是通过自定义消息存储器来实现。
RocketMQ消息属性中有一个 delayTimeLevel 的属性，用于指定消息的延时级别。
默认支持18个等级的延迟消息，延时等级定义在RocketMQ服务端的MessageStoreConfig类中的如下变量中：
//MessageStoreConfig.java
private String messageDelayLevel = "1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h";
例如指定的延时等级为3，则表示延迟时长为10s，即延迟等级是从1开始计数的。
如果RocketMQ中预设的延时级别不能满足需求，也可以通过自定义消息存储器来实现延时消息。
自定义消息存储器主要是通过在消息的属性中设置延时时间来实现的。

定时时间必须设置在定时时长范围内，超过范围则定时不生效，服务端会立即投递消息。定时时长最大值默认为24小时。
定时消息生命周期:
    初始化：消息被生产者构建并完成初始化，待发送到服务端的状态。
    定时中：消息被发送到服务端，和普通消息不同的是，服务端不会直接构建消息索引，
            而是会将定时消息单独存储在定时存储系统中，等待定时时刻到达。
    待消费：定时时刻到达后，服务端将消息重新写入普通存储引擎，对下游消费者可见，等待消费者消费的状态。
    消费中：消息被消费者获取，并按照消费者本地的业务逻辑进行处理的过程。
    消费提交：消费者完成消费处理，并向服务端提交消费结果，服务端标记当前消息已经被处理（包括消费成功和失败）。
            Apache RocketMQ 默认支持保留所有消息，此时消息数据并不会立即被删除，只是逻辑标记已消费。
            消息在保存时间到期或存储空间不足被删除前，消费者仍然可以回溯消息重新消费。
    消息删除：Apache RocketMQ按照消息保存机制滚动清理最早的消息数据，将消息从物理文件中删除。
定时消息的限制:
1,定时消息仅支持在 MessageType为Delay 的主题内使用，
  即定时消息只能发送至类型为定时消息的主题中，发送的消息的类型必须和主题的类型一致。
2,Apache RocketMQ 定时消息的定时时长参数精确到毫秒级，但是默认精度为1000ms，即定时消息为秒级精度。

