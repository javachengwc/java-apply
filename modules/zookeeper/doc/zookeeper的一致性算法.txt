---------------------------------zookeeper的一致性算法------------------------------------
zooKeeper的一致性是基于Paxos算法的ZAB协议实现的。ZAB协议,全称是ZooKeeper Atomic Broadcast protocol。
分成如下4个阶段：
    1,Leader election
        leader选举过程，electionEpoch自增，在选举的时候lastProcessedZxid越大，越有可能成为leader
        leader选举的触发:
            a,server刚开始启动的时候，触发leader选举
            b,leader和follower都有各自的检测超时方式，leader是检测是否过半follower心跳回复了，follower检测leader是否发送心跳了。
            一旦leader检测失败，则leader进入LOOKING状态，其他follower过一段时间因收不到leader心跳也会进入LOOKING状态，从而出发新的leader选举。
            一旦follower检测失败了，则该follower进入LOOKING状态，此时leader和其他follower仍然保持良好，则该follower仍是去学习上述leader的投票，而不是触发新一轮的leader选举
    2,Discovery
        a,leader收集follower的lastProcessedZxid，这个主要用来通过和leader的lastProcessedZxid对比来确认follower需要同步的数据范围
        b,选举出一个新的peerEpoch，主要用于防止旧的leader来进行提交操作（旧leader向follower发送命令的时候，follower发现zxid所在的peerEpoch比现在的小，则直接拒绝，防止出现不一致性）
    3,Synchronization
        follower中的事务日志和leader保持一致的过程，就是依据follower和leader之间的lastProcessedZxid进行，follower多的话则删除掉多余部分，
        follower少的话则补充，一旦对应不上则follower删除掉对不上的zxid及其之后的部分然后再从leader同步该部分之后的数据。
    4,Broadcast
        正常处理客户端请求的过程。leader针对客户端的事务请求，然后提出一个议案，发给所有的follower，一旦过半的follower回复OK的话，
        leader就可以将该议案进行提交了，向所有follower发送提交该议案的请求，leader同时返回OK响应给客户端

----------------------------------
名词解释:
electionEpoch：每执行一次leader选举，electionEpoch就会自增，用来标记leader选举的轮次
peerEpoch：每次leader选举完成之后，都会选举出一个新的peerEpoch，用来标记事务请求所属的轮次
zxid：事务请求的唯一标记，由leader服务器负责进行分配。由2部分构成，高32位是上述的peerEpoch，低32位是请求的计数，从0开始。
      由zxid就可以知道该请求是哪个轮次的，并且是该轮次的第几个请求。
lastProcessedZxid：最后一次commit的事务请求的zxid
------------------------------------------------------------------------------------------
zookeeper集群（3、5个节点）在写性能上能达到上万的tps。
但由于zookeeper一致性是基于Paxos，是单点写，存在单点瓶颈，限制了zookeeper集群的规模，在集群扩展性上不具备优势。
集群扩展性的另一个方面是多地域部署和容灾的支持。比如双机房容灾，基于Leader写的协议不做改造是无法支持的，
这意味着zookeeper不能在没有人工干预的情况下做到双机房容灾。zookeeper的单点写模式就会有断网恢复后的数据对账问题。