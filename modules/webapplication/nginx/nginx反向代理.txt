-------------------------------nginx反向代理------------------------------
nginx是一个很好的反向代理服务器，反向代理的性能堪比haproxy，在很多应用场景中，nginx常作为反向代理server配合keepalived构建高性能，高可用集群。
nginx反向代理常用配置参数:

1,proxy_pass
语法：proxy_pass URL;
配置块：location、if
此配置项将当前请求反向代理到URL参数指定的服务器上，URL可以是主机名或IP地址加端口的形式，
默认情况下反向代理是不会转发请求中的Host头部的。如果需要转发，那么必须加上配置：proxy_set_header Host $host;
例如：proxy_pass http://localhost:8000/uri/;

2,proxy_method
语法：proxy_method method;
配置块：http、server、location
此配置项表示转发时的协议方法名。
例如：proxy_method POST;         ###那么客户端发来的GET请求在转发时方法名也会改为POST。

3,proxy_hide_header
语法：proxy_hide_header the_header;
配置块：http、server、location
nginx会将上游服务器的响应转发给客户端，但默认不会转发以下HTTP头部字段：Date、Server、X-Pad和X-Accel-*。
使用proxy_hide_header后可以任意地指定哪些HTTP头部字段不能被转发。
例如：proxy_hide_header Cache-Control;

4,proxy_pass_header
语法：proxy_pass_header the_header;
配置块：http、server、location
proxy_pass_header会将原来禁止转发的header设置为允许转发。如果是在用户请求时自定义的header，
例如curl –head -H "X_CUSTOM_HEADER: aaa" http://127.0.0.1/api/test，则需要通过proxy_pass_header X_CUSTOM_HEADER来传递。
例如：proxy_pass_header X-Accel-Redirect;
      proxy_pass_header X_CUSTOM_HEADER;

5,proxy_pass_request_body
语法：proxy_pass_request_body on | off;
默认：proxy_pass_request_body on;
配置块：http、server、location
proxy_pass_request_body确定是否向上游服务器发送HTTP包体部分。

6,proxy_pass_request_headers
语法：proxy_pass_request_headers on | off;
默认：proxy_pass_request_headers on;
配置块：http、server、location
proxy_pass_request_body确定是否转发HTTP头部。

7,proxy_redirect
语法：proxy_redirect [ default|off|redirect replacement ];
默认：proxy_redirect default;
配置块：http、server、location
当上游服务器返回的响应是重定向或刷新请求（如HTTP响应码是301或者302）时，proxy_redirect可以重设HTTP头部的location或refresh字段。
例如:
proxy_redirect http://aa.com/two/ http://aa.com/one/;
   ### 如果上游服务器发出的响应是302重定向请求,location字段的URL是：http://aa.com/two/,实际转发给客户端的location是http://aa.com/one/。
proxy_redirect off;               ###使用off参数时，将使location或者refresh字段维持不变。
proxy_redirect default;           ###使用默认的default参数时，会按照proxy_pass配置项和所属的location配置项重组发往客户端的location头部。
proxy_redirect http:// https://;  ###http重定向到https

8,proxy_next_upstream
语法：proxy_next_upstream [error | timeout | invalid_header | http_500 | http_502 | http_503 | http_504 | http_404 | off ];
默认：proxy_next_upstream error timeout;
配置块：http、server、location
此配置项表示当向一台上游服务器转发请求出现错误时，继续换一台上游服务器处理这个请求。上游服务器一旦开始发送应答，Nginx反向代理服务器会立刻把应答包转发给客户端。
因此，一旦Nginx开始向客户端发送响应包，之后的过程中若出现错误也是不允许换下一台上游服务器继续处理的。这样才可以更好地保证客户端只收到来自一个上游服务器的应答。
在默认配置下，如果Nginx遇到网络错误或超时，它会将请求重试到集群中的下一个服务器。
但需要注意，默认情况下，HTTP状态码如500、502等并不会触发重试机制，除非显式地在proxy_next_upstream指令中包含这些状态码。
proxy_next_upstream的参数用来说明在哪些情况下会继续选择下一台上游服务器转发请求。
error：当向上游服务器发起连接、发送请求、读取响应时出错。
timeout：发送请求或读取响应时发生超时。
invalid_header：上游服务器发送的响应是不合法的。
http_500：上游服务器返回的HTTP响应码是500。
http_502：上游服务器返回的HTTP响应码是502。
http_503：上游服务器返回的HTTP响应码是503。
http_504：上游服务器返回的HTTP响应码是504。
http_404：上游服务器返回的HTTP响应码是404。
off：关闭proxy_next_upstream功能—禁用将请求传递给下一个服务器。
当请求类型是POST时，nginx默认不会失败重试，如果想让POST请求也会失败重试，需要如下追加 non_idemponent 参数项。
proxy_next_upstream error timeout non_idemponent;

proxy_next_upstream_timeout       ###设置重试最大超时(截止)时间，默认0-表示不限制
proxy_next_upstream_tries         ###设置重试的最大次数，默认0-表示不限制
proxy_next_upstream_timeout 6s;
proxy_next_upstream_tries 3;      ###这2行设置表示在6秒内允许重试3次

nginx的反向代理模块还有很多其他配置，如设置连接的超时时间、临时文件存储，以及缓存上游服务器响应等功能。
这些都是ngx_http_proxy_module模块的功能，关于nginx的反向代理相关设置请访问http://nginx.org/en/docs/http/ngx_http_proxy_module.html

nginx反向代理缓冲区
proxy_buffering
proxy_buffer_size
proxy_buffers
proxy_busy_buffers_size
proxy_max_temp_file_size
proxy_temp_file_write_size
关于反向代理缓冲区, 主要是合理设置缓冲区大小, 尽量避免缓冲到硬盘时的情况，
当反向代理服务资源过大，缓冲区比较小的情况下，很可能造成通过nginx对外的接口只获取到部分数据(非完整数据)的情况，HTTP响应码一般是206,
通常把缓冲区调大就能解决此问题。

proxy_buffering表示是否打开后端响应内容的缓冲区，如果为off，那么proxy_buffers和proxy_busy_buffers_size这两个指令将会失效。
但是无论proxy_buffering是否开启，对proxy_buffer_size都是生效的。
proxy_buffering开启的情况下，nignx会把后端返回的内容先放到缓冲区当中，然后再返回给客户端(边收边传，不是全部接收完再传给客户端)。
临时文件由proxy_max_temp_file_size和proxy_temp_file_write_size这两个指令决定的。
如果proxy_buffering关闭，那么nginx会立即把从后端收到的响应内容传送给客户端，每次取的大小为proxy_buffer_size的大小，这样效率比较低。
注：proxy_buffering启用时，要提防使用的代理缓冲区太大。这可能会吃掉内存，限制代理能够支持的最大并发连接数

proxy_buffer_size只是响应头的缓冲区，没有必要也跟着设置太大。 proxy_buffer_size最好单独设置，一般设置个4k就够了。
后端服务器的响应头会放到proxy_buffer_size当中，这个大小默认等于proxy_buffers当中的设置单个缓冲区的大小。

proxy_buffers的缓冲区大小一般会设置的比较大，以应付大网页。
proxy_buffers当中单个缓冲区的大小是由系统的内存页面大小决定的，Linux系统中一般为4k。 proxy_buffers由缓冲区数量和缓冲区大小组成的。总的大小为number*size。
若某些请求的响应过大,则超过_buffers的部分将被缓冲到硬盘(缓冲目录由_temp_path指令指定), 当然这将会使读取响应的速度减慢, 影响用户体验.
可以使用proxy_max_temp_file_size指令关闭磁盘缓冲.

proxy_busy_buffers_size不是独立的空间，它是proxy_buffers和proxy_buffer_size的一部分。
nginx会在没有完全读完后端响应的时候就开始向客户端传送数据，所以它会划出一部分缓冲区来专门向客户端传送数据
(这部分的大小是由proxy_busy_buffers_size来控制的，建议为proxy_buffers中单个缓冲区大小的2倍)，然后它继续从后端取数据，缓冲区满了之后就写到磁盘的临时文件中。

proxy_max_temp_file_size和proxy_temp_file_write_size这两个指令设置临时文件相关。
proxy_temp_file_write_size是一次访问能写入的临时文件的大小，默认是proxy_buffer_size和proxy_buffers中设置的缓冲区大小的2倍。
proxy_max_temp_file_size指定当响应内容大于proxy_buffers指定的缓冲区时, 写入硬盘的临时文件的大小.
如果超过了这个值, nginx将与proxy服务器同步的传递内容, 而不再缓冲到硬盘. 设置为0时, 则直接关闭硬盘缓冲.

通用网站缓冲配置demo
proxy_buffer_size 4k;
proxy_buffers 4 32k;                     ###proxy_buffers缓冲区，网页平均在32k以下的设置
proxy_busy_buffers_size 64k;             ###高负荷下缓冲大小
proxy_temp_file_write_size 64k;

大流量缓冲配置demo,每次传输都是nM以上的内容，缓冲区配置大
proxy_buffering on;
proxy_buffer_size 4k;
proxy_buffers 8 1M;
proxy_busy_buffers_size 2M;
proxy_max_temp_file_size 0;

--------------------------------------------------------------------------