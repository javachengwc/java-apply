------------------git代码冲突-------------------------
常用操作:
本地创建项目推到gitlab上
mkdir project_a                 ###创建项目文件夹project_a
cd project_a
git init
touch README.md
git add README.md               ###添加
git commit -m "init project"    ###提交
git remote add origin git@127.0.0.1:group/project_a.git    ###本地项目与远程仓库关联起来
这里特别注意，这里只是把本地项目关联远程项目，而不是创建远程项目，远程项目的创建都必须通过gitlab管理后台来创建。
也就是说要先在gitlab上创建远程项目，这里才能够与它关联。
git push origin master          ###推送到远程

git clone  git@git.xx.com:xx/xx.git     --->克隆某git工程资源
git branch                              --->查看当前分支
git branch aa                           --->创建本地分支aa(当用这种方式创建分支的时候,分支是基于你的上一次提交建立的)
git checkout -b local_path origin/remote_path
                                        --->创建并切换到本地分支local_path，并且该分支对应的远程分支是remote_path。
                                            此种方式创建的分支是一个干净的分支，拉下代码后完全稳合对应的远程分支。
git checkout aa                         --->将本地当前分支切换到aa
git pull origin cheng                   --->拉去cheng的分支到当前分支aa
git push origin aa:remoteaa             --->推送本地aa分支到远程remoteaa分支s
git push origin --delete aa             --->删除远程分支aa

---------------------------------------------------------
冲突异常:
error: Your local changes to the following files would be overwritten by merge:
        protected/config/main.php
Please, commit your changes or stash them before you can merge.

如果保留生产服务器上所做的改动,仅仅并入新配置项, 处理方法如下:
git stash   -----保留改动
git pull
git stash pop   ----回到改动点
然后可以使用git diff -w +文件名 来确认代码自动合并的情况.

如果用代码库中的文件完全覆盖本地工作版本. 方法如下:
git reset --hard
git reset --hard HEAD^    --回到上一个版本
git reset --hard aabbcc   --回到提交id为aabbcc的版本,git reset的操作只是让本地代码回退到之前版本，远程库还是最新版本
git pull
git reflog                --查看之前reset操作历史
--------------------------------------------------------
git远程仓库版本回退
方法1:
git reset --hard  aabbcc        ---本地代码回退到aabbcc版本
git push -f origin master       ---强制push到远程仓库

方法2:一个版本一个版本的revert,比如代码版本一次是a1,a2,a3,现在要回到a1版本
git revert a2                   ---每一次revert,代码回到对应的版本的内容，但每次revert都是一次提交，项目的版本号是要向上增加的
                                ---这里如果回退的版本之前的提交存在并行合并提交，可能回退不成功，这里只能有其它方法回退
git revert a1

方法3:
git reset --hard  aabbcc           ---本地代码回退到aabbcc版本
git push origin --delete master    --->删除远程分支master
git remote add origin master       --->创建远程分支master
git push origin master:master      --->推送本地master分支到远程master分支

方法4
git reset --hard  aabbcc           ---本地代码回退到aabbcc版本
git branch  tmp                    ---创建tmp分支
git checkout tmp                   ---切换到tmp分支,tmp分支其实就是当时aabbcc版的内容
git push origin tmp                ---推送到远程tmp分支，远程tmp分支就是master中的aabbcc版本的内容
--------------------------------------------------------
git config --list                                  --->查看git配置， 配置文件一般是~/.gitconfig
git config --global user.name  [username]          --->配置git账号
git config --global user.email [email]
git config --global core.longpaths true            --->解决git clone时候部分文件报错Filename too long
git config --system --unset credential.helper      --->进行git操作时，弹出用户名密码藏口
#在项目工作区的目录 git config -e 可修改工作区的.git/config文件
------------------------------------------------------------------------
git标签
标签可以针对某一时间点的版本做标记，常用于版本发布，将本地标签推送到Github上即发布了一个Release版本。
git标签分为两种类型：轻量标签和附注标签。轻量标签是指向提交对象的引用，
附注标签则是仓库中的一个独立对象，建议使用附注标签，以后还可以查看标签信息。
git tag v0.2.0 -light           ###创建轻量标签v0.2.0
git tag -a v0.1.0 -m "release 0.1.0 version"           ###创建附注标签
git tag                         ###列出当前仓库的所有标签
git tag -l 'v0.1.*'             ###列出符合模式的标签
git show v0.1.0                 ###查看标签版本信息
git checkout [tagname]          ###切换标签与切换分支命令相同
                                   切换标签后处于一个空的分支上，即”You are in ‘detached HEAD’ state.”
git tag -d v0.1.2               ###删除标签，打或需要修改标签时，需要先将标签删除
git tag -a v0.1.0 49e0cd22f6bd9510fe65084e023d9c11    ###给指定的commit打标签

标签只会保存在本地，暂存区对象也是只保存在本地，在推送仓库的时候不会推送到远程服务器上，
标签可以推送到远程服务器，需要通过显式命令才能将标签签到远程仓库，其命令方式犹如推送分支，
运行git push origin tagname,推送本地所有标签 --tags,其它人在拉取数据的时候也会看到对推送到服务器的标签。
git push [remote] [tag]         ###提交指定tag
git push origin v0.1.0          ###将v0.1.0标签提交到git服务器
git push origin –tags          ###将本地所有标签一次性提交到git服务器
git checkout -b [branch] [tag]  ###新建一个分支，指向某个tag
------------------------------------------------------------------------
git status   查看当前项目下所有文的状态

git branch 不带参数：列出本地已经存在的分支，并且在当前分支的前面加“*”号标记
git branch -r 列出远程分支
git branch -a 列出本地分支和远程分支

git branch 创建一个新的本地分支，需要注意，此处只是创建分支，不进行分支切换
    eg:
    #git branch newbranch2
    #git branch
    * master
    newbranch
    newbranch2
    当前的分支依然是master，不进行切换
git branch --track [branch] [remote-branch]  新建一个分支，与指定的远程分支建立追踪关系
git branch -m | -M oldbranch newbranch 重命名分支，如果newbranch名字分支已经存在，则需要使用-M强制重命名，否则，使用-m进行重命名
git branch -d | -D branchname 删除branchname分支
git branch -d -r branchname   删除远程branchname分支

   eg:
   $ git clone git://git.kernel.org/pub/scm/.../linux-2.6 my2.6
   $ cd my2.6
   $ git branch my2.6.14 v2.6.14
   $ git checkout my2.6.14      ----实际上就是切换分支到my2.6.14
   第三行符合git branch <branchname> [<start-point>]的格式，即以v2.6.14为start-point，创建新的本地分支branchname

------------------------------------------------------------
git remote 不带参数，列出已经存在的远程分支，
    eg:
    #git remote
    origin_apps

git remote -v | --verbose 列出详细信息，在每一个名字后面列出其远程url，查看当前项目远程连接的是哪个仓库地址
    eg:
    #git remote -v
    origin_apps     gitolite@scm:apps/Welcome.git (fetch)
    origin_apps     gitolite@scm:apps/Welcome.git (push)
    需要注意的是，如果有子命令，-v | --verbose需要放在git remote与子命令中间

git remote add origin git@github.com:defnngj/hibernate-demo.git
    将本地创建的新项目与新仓库建立连接

git remote show name 必须要带name，否则git remote show的作用就是git remote，给出remote name的信息
git remote show origin           ###查看远程仓库信息

------------------------------------------------------------
git push origin master  推送到master分支
git push <远程主机名> <本地分支名>:<远程分支名>
   eg:git push origin locala:remoteb  推送本地locala分支到远程remoteb分支

git fetch origin           取得远程更新，这里可以看做是准备要取了
git fetch <远程主机名>     将某个远程主机的更新，全部取回本地
git fetch <远程主机名> <分支名>  取回o远程主机的某个分支

git merge [branch]         合并指定分支到当前分支

git pull                   取回远程主机某个分支的更新，再与本地的指定分支合并
git pull <远程主机名> <远程分支名>:<本地分支名>
   eg:git pull origin next:master  取回origin主机的next分支，与本地的master分支合并
      git pull origin next         取回origin/next分支，再与当前分支合并。
                                   实质上，这等同于先做git fetch，再做git merge

git checkout -b newBrach origin/master 在origin/master的基础上，创建一个新分支
git cherry-pick [commit]           选择一个commit，合并进当前分支
-------------------------------------------------------------
git reflog show 分支                     查看分支提交历史
git log -p filename                      查看某文件的历史版本信息
git log --pretty=oneline  filename       显示每个版本都修改了那些文件
git show 提交版本号                      显示某版本号具体修改内容
git diff [<commit-id>] [<commit-id>]     比较两个commit-id之间的差异
git diff --cached [<commit-id>] [<path>  比较暂存区与指定commit-id的差异
git diff commit-id  [<path>...]          比较工作区与指定commit-id的差异
git diff                                 不加参数即默认比较工作区与暂存区
git reset --hard commit_id  filename     将文件恢复到某历史版本
git reset --hard origin/master           将工程恢复成指定远程分支最新版本内容

reset命令有3种方式：
git reset –mixed：此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息
git reset –soft：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可
git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容

git tag            ---列出所有tag
git tag v1         ---创建一个tag在当前commit
git tag -a "v2" -m "cc"
                   ---创建一个tag为v2
git cherry-pick commitid   ---将commitid提交合到当前分支
-------------------------------------------------------------
创建一个本地仓库的克隆版本
    git clone /path/to/repository
    如果是远端服务器上的仓库，你的命令会是这个样子：
    git clone username@host:/path/to/repository
    ep: https://e.coding.net/xx/aa.git   -->  git clone https://username:passward@e.coding.net/xx/aa.git
    如果用户名或密码包含@符号,需要转义成%40，否则会与仓库地址前面的@造成冲突。

本地仓库由 git 维护的三棵“树”组成。
    第一个是工作目录，它持有实际文件；
    第二个是 缓存区（Index），它像个缓存区域，临时保存你的改动；
    最后是 HEAD，指向你最近一次提交后的结果。

添加与提交
    git add <filename>            ###添加内容
    git add *
    git add .                     ###点表示当前目录下的所有内容,它会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，
                                     包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。
    git add -u                    ###它仅监控已经被add的文件（即tracked file），将被修改的文件提交到暂存区。
                                     （git add --update的缩写）
    git add -A                    ###上面两个功能的合集（git add --all的缩写）
    git rm                        ###删除内容
    git rm work -r -f             ###删除目录work
    git mv [file-original] [file-renamed]    ###改名文件，并且将这个改名放入暂存区
    git commit -m "代码提交信息"   ###改动已经提交到了 HEAD，但是还没到远端仓库。
    git push origin master        ###改动提交到远端仓库
    如果还没有克隆现有仓库，并欲将仓库连接到某个远程服务器，可以使用如下命令添加：
    git remote add origin <server>

分支
    分支是用来将特性开发绝缘开来的。
    在你创建仓库的时候，master 是“默认的”。
    在其他分支上进行开发，完成后再将它们合并到主分支上。
    git checkout -b feature_x     ###创建一个叫做“feature_x”的分支，并切换过去
    git checkout master           ###切换回主分支
    git branch -d feature_x       ###删除新建的分支

更新与合并
    git pull                      ###更新本地仓库至最新改动
    git merge <branch>            ###合并其他分支到当前分支
    git会尝试去自动合并改动。有可能出现冲突（conflicts）。需要人为修改冲突文件来解决冲突。
    在合并改动之前，可以使用如下命令查看差异：
    git diff <source_branch> <target_branch>
    如果误操作，可以使用如下命令替换掉本地改动：
    git checkout -- <filename>
    此命令会使用 HEAD 中的最新内容替换掉工作目录中的文件。
    已添加到缓存区的改动，以及新文件，都不受影响
    假如想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将本地主分支指向到它：
    git fetch origin
    git reset --hard origin/master
    某个提交从A分支复制到B分支
    在B分支下执行git cherry-pick commitid(A分支的提交id)
-----------------------------------------------------
在idea中使用git需要
1,配置git  file-->settings-->git
2,将ssh公私钥放到C:\Users\***\.ssh下，且名称必须是id_rsa,id-rsa.pub,不然ssh password login弹框始终会anth fail。

-------------------------------------------------------------