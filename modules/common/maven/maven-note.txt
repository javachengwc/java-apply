----------nexus私服搭建-------------------------
注: nexus 2.6以上版本需jdk1.7
    nexus下载地址:  http://www.sonatype.org/nexus/  http://www.sonatype.org/nexus/go
    nexus安装的目录及储存目录最好是777(读写执行)权限全有.
---------------
cd ..../bin
./nexus console     ----检查是否正常
./nexus start&    ---启动
----------maven命令------------------------------
---查看插件描述
   mvn help:describe -DgroupId=org.apache.maven.plugins -DartifactId=maven-jar-plugin -Ddetail
---发布到本地仓库
   mvn install:install-file -Dfile=easyjweb-core-1.0-m3.jar -DgroupId=com.easyjf.easyjweb -DartifactId=easyjweb-core -Dversion=1.0-m3 -Dpackaging=jar
---发布到私服
   mvn deploy:deploy-file -Dfile=D:\other_lib\DBConfigDecrypt-1.0.jar -DgroupId=music.external.interface.dbDecrypt -DartifactId=DBConfigDecrypt -Dversion=1.0 -Dpackaging=jar -Durl=http://172.19.101.62:8081/nexus/content/repositories/yymz -DrepositoryId=yymz
---创建普通项目
   mvn archetype:create  -DgroupId=sfs.maven.learn -DartifactId=maven_test
---创建web项目
   mvn archetype:create  -DgroupId=sfs.maven.learn -DartifactId=maven_web_test -DarchetypeArtifactId=maven-archetype-webapp
---清理
   mvn clean
---编译源代码
   mvn compile
---编译测试代码
   mvn test-compile
---运行测试
   mvn test
---打包
   mvn package
---清理,编译,跳过测试且依赖打包,并发布到本地
   mvn clean  compile dependency:copy-dependencies install  -Dmaven.test.skip=true
---maven通过jetty插件启动web
   mvn -Djetty.port=1001  jetty:run
---查看maven依赖树
   mvn dependency:tree -Dverbose
----------其他相关-------------------------------
---移除下载失败的jar包
   find ~/.m2 -name "*.lastUpdated" -exec grep -q "Could not transfer" {} \; -print -exec rm {} \;
--------------------------------------------------
在项目中maven管理的包依赖中，如果某jar包有冲突(依赖多个版本的同一jar包)，对冲突包依赖的选择方式为:
哪个jar包的依赖路径最小就优先依赖那个jar包,也就是依赖层级优先从低到高。
在依赖路径层次一致的情况下，哪个jar包先引用就选此jar包

--------------------------------------------------
maven内置变量
${project.build.sourceDirectory}:项目的主源码目录，默认为src/main/java/
${project.build.testSourceDirectory}:项目的测试源码目录，默认为/src/test/java/
${project.build.directory}:项目构建输出目录，默认为target/
${project.outputDirectory}:项目主代码编译输出目录，默认为target/classes/
${project.testOutputDirectory}:项目测试代码编译输出目录，默认为target/testclasses/
${project.groupId}:项目的groupId
${project.artifactId}:项目的artifactId
${project.version}:项目的version,于${version}等价
${project.build.finalName}:项目打包输出文件的名称，默认为${project.artifactId}${project.version}

------------------------------------------------------
maven配置pom.xml或settings.xml中的元素说明
1,元素标签optional的作用,比如项目A的pom依赖包含如下
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-devtools</artifactId>
    <!-- 防止将devtools依赖传递到其他模块中 -->
    <optional>true</optional>
</dependency>
当其他项目通过pom依赖项目A的时候，spring-boot-devtools不会被传递依赖进来
当依赖某工程很庞大或很可能与自身或其他工程的jar包有冲突的时候建议加上该选项,减少依赖冲突

2，元素标签classifier的作用，
maven中的<classifier>是一个可选的元素，用于区分同一artifact的不同版本或变种。‌
在maven的坐标系统中，一个artifact通常由groupId、artifactId和version三个基本元素确定。
然而，在某些情况下，可能需要为同一个artifact创建多个不同的版本或变种，比如源代码包、文档包或特定平台的二进制文件等。
这时，<classifier>就派上了用场。通过为artifact添加<classifier>属性，可以为同一个artifact创建多个不同的附件，
每个附件都有一个唯一的<classifier>值，用于区分它们,这样，可以在Maven仓库中存储和管理这些不同的artifact变种。
比如可以为不同JDK版本生成jar包，例如json-lib-2.2.2-jdk15.jar和json-lib-2.2.2-jdk13.jar
<dependency>
    <groupId>net.sf.json-lib</groupId>
    <artifactId>json-lib</artifactId>
    <version>2.2.2</version>
    <classifier>jdk15</classifier>
</dependency>
------------------------------------------------------

