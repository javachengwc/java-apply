--------------------------linux常用软件安装------------------------
---------------gcc automake autoconf libtool make gcc-c++
yum -y install gcc automake autoconf libtool make     ---安装gcc automake autoconf libtool make
yum -y install gcc-c++                                ---安装gcc-c++

---------------telnet vim
yum -y install telnet vim

---------------scp
scp不直接安装,通过安装openssh-clients来安装scp
yum install openssh-clients

---------------wget
wget安装:
    (源码安装)
    wget下载:ftp://ftp.gnu.org/gnu/wget 或 http://ftp.gnu.org/gnu/wget
    # tar -zxvf wget-1.14.tar.gz
    # cd wget-1.14
    # ./configure
    # make
    # make install
    (yum安装)
    yum -y install wget
wget使用:
wget --limit-rate=300k http://www.cc.com/cc.zip     ---下载cc.zip,且限制速度为300k/s
wget -O name.zip http://www.cc.com/download.aspx?id=100  ---下载内容保存为name.zip,wget默认以最后一个/的后面的字符来命令文件名
wget -P /tmp/dd/  http://www.cc.com/cc.zip          ---下载cc.zip到指定目录/tmp/dd/中
wget -c http://www.cc.com/cc.zip                    ---断点续传cc.zip文件
wget -b http://www.cc.com/cc.zip                    ---后台下载cc.zip文件
wget --spider http://www.cc.com/cc.zip              ---测试资源是否可下载
wget --tries=40 http://www.cc.com/cc.zip            ---下载cc.zip文件,重试次数设为40
wget --ftp-user=aa --ftp-password=bb ftp://ftp.cc.com/f/cc.zip
                                                    ---带账号的ftp下载文件
wget --user-agent="Mozilla/5.0 Chrome..." http://www.cc.com/cc.zip
                                                    ---伪装代理下载

--------------java
1,下载相应版本32或64为jdk压缩包,比如32位1.7版本jdk-7u51-linux-i586.gz
2,cp jdk-7u51-linux-i586.gz /usr/local/jdk/
  tar -xzvf jdk-7u51-linux-i586.gz
  rm -rf jdk-7u51-linux-i586.gz
3,环境变量配置
  vi /etc/profile
  JAVA_HOME=/usr/local/jdk/jdk1.7.0_51
  CLASSPATH=.:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar
  PATH=$JAVA_HOME/bin:$PATH
  export JAVA_HOME CLASSPATH PATH
4,生效及测试
  source /etc/profile
  java -version

或者直接下载rpm包，比如jdk-8u201-linux-x64.rpm
然后 rpm -ivh jdk-8u201-linux-x64.rpm即可

openjdk的安装
yum install java-1.8.0-openjdk.x86_64
yum install java-1.8.0-openjdk-devel
---------------maven
在http://maven.apache.org/download.cgi下载apache-maven-3.3.9-bin.tar.gz
wget http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz
tar -zxvf apache-maven-3.3.9-bin.tar.gz
vi /etc/profile 设置全局变量
    M2_HOME=/opt/maven/apache-maven-3.2.1
    export M2_HOME
    PATH=$PATH:$M2_HOME/bin
    export PATH
source /etc/profile
mvn -v #显示了版本信息表示maven安装成功。

---------------gradle
wget https://services.gradle.org/distributions/gradle-4.2.1-bin.zip
unzip -d /usr/local/gradle-4.2.1-bin.zip
vi /etc/profile 设置全局变量
    GRADLE_HOME=/usr/local/gradle-4.2.1
    export GRADLE_HOME
    PATH=$PATH:${GRADLE_HOME}/bin
    export PATH
    export GRADLE_OPTS='-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.jvmargs=-Xmx512m'
source /etc/profile
gradle -v #显示了版本信息表示gradle安装成功。

---------------git
yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-ExtUtils-MakeMaker #安装依赖包
wget https://github.com/git/git/archive/v2.7.0-rc3.tar.gz
tar -zxvf v2.7.0-rc3.tar.gz
cd git-2.7.0-rc3
make prefix=/usr/local/git all
make prefix=/usr/local/git install
vim /etc/profile
    export PATH=/usr/local/git/bin:$PATH
source /etc/profile
git --version   #查看git版本，能显示出版本,安装成功。
git config --global user.name "ccc"
git config --global user.email "ccc@ccc.com"  #设置git账号
ssh-keygen -t rsa -C "ccc@ccc.com"    #创建SSH key
vim ~/.ssh/id_rsa.pub                 #将id_rsa.pub文件内容，添加到github或gitlab代码服务器自己帐号的SSH key模块中。
ssh -T git@github.com                 #测试git是否可连接到github服务器。

---------------tomcat
wget -P /soft/ http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-7/v7.0.70/bin/apache-tomcat-7.0.70.tar.gz
cd /soft
tar -zxvf apache-tomcat-7.0.70.tar.gz
直接下载后解压就完成了

---------------mysql
rpm -qa | grep  mysql
    mysql-libs-5.1.73-3.el6_5.i686
rpm -e mysql-libs-5.1.73-3.el6_5.i686 --nodeps   #卸载自带的低版本mysql
wget http://mirrors.sohu.com/mysql/MySQL-5.7/mysql-5.7.18-linux-glibc2.5-x86_64.tar
tar -xvf mysql-5.7.18-linux-glibc2.5-x86_64.tar
tar -zxvf  mysql-5.7.18-linux-glibc2.5-x86_64.tar.gz
cp -r mysql-5.7.18-linux-glibc2.5-x86_64 /usr/local/mysql
groupadd mysql
useradd -r -g mysql mysql
cd /usr/local/mysql
mkdir data                 #创建mysql数据目录
touch error.log
chown -R mysql:mysql ./
yum install libaio
######debian系统安装libaio是apt-get install libaio1 libaio-dev
./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data
   [Note] A temporary password is generated for root@localhost: f4(t0cvr*Dtq #此临时密码需要记住
./bin/mysql_ssl_rsa_setup  --datadir=/usr/local/mysql/data
chown -R mysql:mysql ./
cp support-files/my-default.cnf  /etc/my.cnf
cp support-files/mysql.server /etc/init.d/mysql  #启动脚本放到开机初始化目录
chmod 755 /etc/init.d/mysql
vim /etc/init.d/mysql
   basedir=/usr/local/mysql
   datadir=/usr/local/mysql/data
vim /etc/my.cnf
   [client]
   port=3306
   default-character-set=utf8
   socket=/usr/local/mysql/mysql.sock
   [mysqld]
   port=3306
   character-set-server=utf8
   socket=/usr/local/mysql/mysql.sock
   basedir=/usr/local/mysql
   datadir=/usr/local/mysql/data
   tmpdir=/usr/local/mysql/data
   log-error=/usr/local/mysql/error.log
   pid-file=/usr/local/mysql/mysql.pid
   max_connections=500
   default-storage-engine=InnoDB
   binlog_format=mixed
   log_bin=/usr/local/mysql/mysql-bin.log
   max_binlog_size=100M
   max_allowed_packet=1000M
   slow_query_log
   long_query_time=2
   slow_query_log_file=/usr/local/mysql/slow.log
   server-id=1
   sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES
bin/mysqld_safe --user=mysql &  #启动mysql
bin/mysql -uroot -pf4(t0cvr*Dtq  #密码是之前生成的临时密码
    mysql>set password=password('root');
    mysql>grant all privileges on *.* to root@'%' identified by 'root' with grant option;  #改root密码
    mysql>flush privileges;
    mysql>quit;
bin/mysqladmin shutdown -uroot -proot  #关闭mysql
vim /etc/profile
    export PATH=/usr/local/mysql/bin:$PATH
source /etc/profile
chkconfig --add mysql
chkconfig --level 345 mysql on   #mysql加入启动项

---------------nginx
参见本工程中nginx安装.txt文件。

---------------apache
wget http://archive.apache.org/dist/httpd/httpd-2.2.23.tar.gz
tar -zxvf httpd-2.2.23.tar.gz
cd httpd-2.2.23
./configure --prefix=/usr/local/apache2  --enable-module=shared
make && make install
/usr/local/apache2/bin/apachectl start   #启动apache

---------------zookeeper
参见本工程中zookeeper配置安装.txt文件。

---------------activemq
参见本工程中activemq安装.txt文件。

---------------kafka
参见本工程中kafka安装.txt文件。

---------------redis
参见本工程中redis安装启动.txt文件。

---------------memcache
#卸载系统自带的老版本的libevent
rpm -qa libevent
libevent-1.4.13-1.el6.x86_64
rpm -e --nodeps libevent

#安装一个较新的稳定版的libevent
wget https://github.com/libevent/libevent/releases/download/release-2.0.22-stable/libevent-2.0.22-stable.tar.gz
tar -zxvf libevent-2.0.22-stable.tar.gz
cd libevent-2.0.22-stable
./configure  --prefix=/usr/local/libevent
make
make install                              #编译安装libevent

#为libevent创建软链接到/lib库下，64位系统对应/lib64
ln -s /usr/local/libevent/lib/libevent* /lib/
ln -s /usr/local/libevent/lib/libevent* /lib64/

#安装memcached
wget http://www.memcached.org/files/memcached-1.4.25.tar.gz
tar -zxvf memcached-1.4.25.tar.gz
cd memcached-1.4.25
./configure --prefix=/usr/local/memcached --with-libevent=/usr/local/libevent
make
make install                              #编译安装memcached
/usr/local/memcached/bin/memcached -d -m 2048 -u root -c 1024  -t 4 -p 11211 -P /tmp/memcached.pid #启动memcached

memcached启动参数
-p 指定端口号（默认11211）
-m 指定最大使用内存大小（默认64MB）
-t 线程数（默认4）
-c 最大同时连接数，默认是1024
-l 连接的IP地址, 默认是本机
-d start 启动memcached服务
-d restart 重起memcached服务
-d stop|shutdown 关闭正在运行的memcached服务
-M 内存耗尽时返回错误，而不是删除项
-f 块大小增长因子，默认是1.25
-n 最小分配空间，key+value+flags默认是48

---------------fastdfs
同安装memcached一样,先要安装libevent

#安装libfastcommon,不然在编译高版本的fastdfs时候会报错make: *** [../common/fdfs_global.o] Error 1
wget https://github.com/happyfish100/libfastcommon/archive/V1.0.7.tar.gz
tar -zxvf V1.0.7
cd libfastcommon-1.0.7
./make.sh
./make.sh install
#安装fastdfs
wget https://github.com/happyfish100/fastdfs/archive/V5.04.tar.gz
tar -zxvf V5.04
cd fastdfs-5.04
./make.sh
./make.sh install
#配置fastdfs
#先配置tracker
cd /etc/fdfs
cp tracker.conf.sample tracker.conf
vim tracker.conf
    disabled=false
    port=22122   #设置tracker的端口号
    base_path=/data/fastdfs/tracker  #设置tracker的数据文件和日志目录（需预先创建）
    http.server_port=18080    #设置http端口号
mkdir -p  /data/fastdfs/tracker
#配置storage,(一般storage与tracker分别安装部署在不同的服务器上，此处为了方便，就同机器部署)
cd /etc/fdfs
cp storage.conf.sample storage1.conf
cp storage.conf.sample storage2.conf
vim storage1.conf
    disabled=false
    group_name=group1
    port=23000                          #设置storage的端口号
    base_path=/data/fastdfs/storage1    #设置storage的日志目录（需预先创建）
    store_path_count=1                  #存储路径个数，需要和store_path个数匹配
    store_path0=/data/fastdfs/storage1  #存储路径
    tracker_server=192.168.100.20:22122 #tracker服务器的IP地址和端口号,不能是127.0.0.1,不然启动storage会报错,启不起来
    http.server_port=18888              #设置http端口号
vim storage2.conf
    disabled=false
    group_name=group2
    port=23001                          #设置storage的端口号
    base_path=/data/fastdfs/storage2    #设置storage的日志目录（需预先创建）
    store_path_count=1                  #存储路径个数，需要和store_path个数匹配
    store_path0=/data/fastdfs/storage2  #存储路径
    tracker_server=192.168.100.20:22122 #tracker服务器的IP地址和端口号,不能是127.0.0.1,不然启动storage会报错,启不起来
    http.server_port=18889              #设置http端口号
mkdir -p  /data/fastdfs/storage1
mkdir -p  /data/fastdfs/storage2
#启动fdfs
/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart  #启动tracker
/usr/bin/fdfs_storaged /etc/fdfs/storage1.conf restart  #启动storage1
/usr/bin/fdfs_storaged /etc/fdfs/storage2.conf restart  #启动storage2

#设置开机启动
echo '/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart' >> /etc/rc.d/rc.local
echo '/usr/bin/fdfs_storaged /etc/fdfs/storage1.conf restart' >> /etc/rc.d/rc.local
echo '/usr/bin/fdfs_storaged /etc/fdfs/storage2.conf restart' >> /etc/rc.d/rc.local

#查看storage状态
/usr/bin/fdfs_monitor /etc/fdfs/storage1.conf

---------------solr
#需先安装tomcat,tomcat的安装见上面，此处略
wget http://archive.apache.org/dist/lucene/solr/4.5.1/solr-4.5.1.zip
unzip solr-4.5.1.zip                               #解压
cd solr-4.5.1/dist
cp solr-4.5.1.war solr.war                         #重命名
cp solr.war /home/cc/tomcat-solr/webapp/           #拷贝到tomcat/webapp下
sh /home/cc/tomcat-solr/bin/startup.sh             #启动tomcat,自动解压出solr目录
mkdir -p /home/cc/solrdata                         #创建solr存放索引的目录
cp -rf solr-4.5.1/example/solr/* /home/cc/solrdata #复制示例索引到索引目录
cd /home/cc/tomcat-solr/webapps/solr/WEB-INF
vim web.xml                                        #修改solr home配置(原文件已有一个注释掉的demo片段,直接去掉注释在那配置)
    <env-entry>
      <env-entry-name>solr/home</env-entry-name>
      <env-entry-value>/home/cc/solrdata</env-entry-value>
      <env-entry-type>java.lang.String</env-entry-type>
    </env-entry>
mkdir classes                                      #创建classes目录,为了放日志配置文件
cp -/solr-4.5.1/example/resources/log4j.properties ./classes   #从解压目录复制log4j配置到solr对应目录
cp -/solr-4.5.1/example/lib/ext/* ./lib           #复制部分jar到solr下lib目录中
sh /home/cc/tomcat-solr/bin/shutdown.sh
sh /home/cc/tomcat-solr/bin/startup.sh            #重启tomcat
http://127.0.0.1:8080/solr                        #访问solr

---------------es
参见本工程中es安装.txt文件。

---------------sz,rz
yum install lrzsz

---------------node
yum install nodejs

在debian版本上安装过程如下:
curl -sL https://deb.nodesource.com/setup_8.x | bash -
apt-get install -y nodejs
npm config set registry https://registry.npm.taobao.org/
npm config set sass-binary-site https://npm.taobao.org/mirrors/node-sass/

---------------php
#安装php
yum install -y libxml2-devel
wget http://cn2.php.net/get/php-5.6.31.tar.gz/from/this/mirror -O php-5.6.31.tar.gz
tar -zxvf php-5.6.31.tar.gz
cd php-5.6.31
./configure --prefix=/usr/local/php --with-apxs2=/usr/local/apache2/bin/apxs
make && make install
#配置php
cp php.ini-development /usr/local/php/lib/php.ini
#在apache中配置php
vim /usr/local/apache2/conf/httpd.conf
    在AddType application/x-gzip .gz .tgz下行添加
    AddType application/x-httpd-php .php
    AddType application/x-httpd-php-source .phps
    修改DirectoryIndex index.html为
        DirectoryIndex index.html index.php
vim /usr/local/apache2/htdocs/test.php
    <?php phpinfo();?>;
/usr/local/apache2/bin/apachectl stop
/usr/local/apache2/bin/apachectl start   #启动apache
http://localhost/test.php    能访问php页面表示在apache中配置php成功

---------------ruby
yum install ruby
yum install rubygems
或编译安装
wget https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.1.tar.gz
tar -zxvf ruby-2.3.1.tar.gz
cd  ruby-2.3.1
./configure --prefix=/usr/local/ruby
make && make install                                  ###编译安装
cd /usr/bin/
ln -s /usr/local/ruby/bin/ruby ruby                   ###建软连
ln -s /usr/local/ruby/bin/gem gem
ruby -v                                               ###查看ruby版本

---------------python
yum install python 或 apt-get install python
yum install python-setuptools                            ---装python
或编译安装
yum groupinstall "Development tools"                     ---安装devtoolset
yum install zlib-devel
yum install bzip2-devel
yum install openssl-devel
yum install ncurses-devel
yum install sqlite-devel                                 ---安装依赖包

wget --no-check-certificate https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tar.xz
tar xf Python-2.7.9.tar.xz
cd Python-2.7.9

./configure --enable-shared --enable-loadable-sqlite-extensions --prefix=/usr/local
其中--enable-loadable-sqlite-extensions是sqlite的扩展，如果需要使用的话则带上这个选项。
make && make install 或 make && make altinstall         ---编译安装

##配置软连接，让系统pyhon默认指向python2.7.9
mv /usr/bin/python /usr/bin/python2.6_temp
ln -s /usr/local/bin/python2.7 /usr/bin/python

yum与python2.7不兼容的处理，修改yum文件
vim /usr/bin/yum
将"!/usr/bin/python"改为"!/usr/bin/python2.6"

vi /etc/profile                                         ---配置环境变量
    PY_HOME=/usr/local/bin/python2.7
    export PATH=$PY_HOME/bin:$PATH
source /etc/profile                                     ---当前终端生效，reboot后才会完全生效

python -V查看版本信息，如果出现错误
error while loading shared libraries: libpython2.7.so.1.0: cannot open shared object file: No such file or directory
vi /etc/ld.so.conf
添加新的一行内容/usr/local/lib
/sbin/ldconfig
/sbin/ldconfig -v

-------------------------python3
yum install -y gcc zlib-devel
wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz
mkdir -p /usr/local/python3
tar -zxvf Python-3.8.0.tgz
cd Python-3.8.0
./configure --prefix=/usr/local/python3
make
make install
ln -s /usr/local/python3/bin/python3 /bin/python3
vim ~/.bash_profile
    export PATH=$PATH:$HOME/bin:/usr/local/python3/bin

--------------------------pip
pip是python包管理工具
wget --no-check-certificate  https://pypi.python.org/packages/source/s/setuptools/setuptools-19.6.tar.gz
tar -zxvf setuptools-19.6.tar.gz
cd setuptools-19.6
python3 setup.py build
python3 setup.py install
wget --no-check-certificate  https://pypi.python.org/packages/source/p/pip/pip-8.0.2.tar.gz
tar -zxvf pip-8.0.2.tar.gz
cd pip-8.0.2
python3 setup.py build
python3 setup.py install

-------------------------go
wget https://dl.google.com/go/go1.11.linux-amd64.tar.gz     ---下载相应版本压缩包
tar -xzvf go1.11.linux-amd64.tar.gz
mv go /usr/local/go
vi /etc/profile                                             ---环境变量配置
    GO_HOME=/usr/local/go
    PATH=$GO_HOME/bin:$PATH
    export GO_HOME PATH
source /etc/profile                                         ---生效及测试
go version
---------------------------------------
对于源码安装的软件的卸载:make uninstall 或 手动删除
如果软件在安装后支持用make uninstall命令来进行卸载，就可以执行它来进行卸载.
如果不提供此功能，则软件的卸载必须手动删除。
由于软件可能将文件分散地安装在系统的多个目录中，往往很难把它删除干净，
那应该在编译前进行配置，指定软件将要安装到目标路径：./configure --prefix=目录名，
这样可以使用“rm -rf 软件目录名”命令来进行干净彻底的卸载。
---------------------------------------
#安装过程中找不到相应库解决
vi /etc/ld.so.conf  #添加相应的库路径在里面
/sbin/ldconfig

/etc/ld.so.conf文件记录了编译时使用的动态链接库的路径。
默认情况下，编译器只会使用/lib和/usr/lib这两个目录下的库文件,64位系统还会使用/usr/lib64这个目录。
如果安装了某些库，比如在安装gtk+-2.4.13时它会需要glib-2.0,安装好glib后没有指定 --prefix=/usr。
这样glib库就装到了/usr/local下，而又没有在/etc/ld.so.conf中添加/usr/local/lib。安装gtk的时候就会报错找不到相应的库。
将/usr/local/lib加入到/etc/ld.so.conf中，这样安装gtk时就会去搜索/usr/local/lib,就可以找到需要的库。
库文件的路径如 /usr/lib 或 /usr/local/lib 应该在 /etc/ld.so.conf 文件中，这样ldd才能找到这个库。
添加以后，要以 root 的身份运行 /sbin/ldconfig才能生效 。

ldconfig是一个程序，通常它位于/sbin下，是root用户使用的。
它的作用就是将/etc/ld.so.conf列出的路径下的库文件缓存到/etc/ld.so.cache 以供使用
因此当安装完一些库文件，(例如刚安装好glib)，或者修改ld.so.conf增加新的库路径后，需要运行一下/sbin/ldconfig
使所有的库文件都被缓存到ld.so.cache中，如果没做，即使库文件明明就在/usr/lib下的，也是不会被使用的，
结果编译过程中抱错，缺少xxx库。
---------------------------------------------------------------


