------------------------linux字符串操作-------------------------
---------------sort命令
sort命令依据不同的数据类型进行排序。
命令格式:sort [选项] [源文件] [-o 输出文件]
常用选项：
  -b   忽略每行前面开始出的空格字符。
  -c   检查文件是否已经按照顺序排序。
  -f   排序时，忽略大小写字母。
  -M   将前面3个字母依照月份的缩写进行排序。
  -n   依照数值的大小排序。
  -o <输出文件>   将排序后的结果存入指定的文件。
  -r   以相反的顺序来排序。
  -t <分隔字符>   指定排序时所用的栏位分隔字符。
  -k  选择以哪个区间进行排序。
  -u  排除重复数据

ep:按照第二列数字排序
 $ cat aa.txt
 banana:30:5.5
 apple:10:2.5
 pear:90:2.3
 orange:20:3.4
 $ sort -n -k2 -t ':' aa.txt
 apple:10:2.5
 orange:20:3.4
 banana:30:5.5
 pear:90:2.3

---------------cut命令
cut是一个选取命令，就是将一段数据经过分析，取出想要的。
cut命令从文件(或数据流)的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。
命令格式：cut  [-bn] [file] 或 cut [-c] [file]  或  cut [-df] [file]

常用选项
-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了-n 标志。
-n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b后面的字节列项参数的范围内，该字符将被写出；否则，该字符将被排除。
-c ：以字符为单位进行分割。
-d ：自定义分隔符，默认为制表符。
-f ：与-d一起使用，指定显示第几个区域。
cut命令主要是接受三个定位方法：
第一，字节（bytes），用选项-b
第二，字符（characters），用选项-c
第三，域（fields），用选项-f

$ cat aa.txt
星期一
星期二
星期三

$ cut -c 3 aa.txt
一
二
三

$ cut -b 3 aa.txt
�
�
�
#用-c则会以字符为单位，输出正常；而-b只会傻傻的以字节（8位二进制位）来计算，输出就是乱码。
#-b选取的结果不会出现乱码的情况一般是内容是全字母或数字的内容，字母和数字是单字节字符。

$ cat aa.txt |cut -nb 2

$ cat aa.txt |cut -nb 1,2,3
星
星
星
#-nb联合使用，如果字符的最后一个字节落在由 -b后面的字节列项参数的范围内，该字符将被写出；否则，该字符将被排除。
#中文在linux中一般1个字符站3个个字节，所以cut -nb 2输出为空，而cut -nb 1,2,3输出是'星'。

$ cat /etc/passwd|head -n 1
root:x:0:0:root:/root:/bin/bash

$ cat /etc/passwd|head -n 1|cut -d: -f1
root
#用-d来设置间隔符为冒号，然后用-f来设置要取的是第一个域。当间隔符是制表符时,可以省略-d选项，直接用－f来取域就可以。
#cut只允许间隔符是一个字符，如果分隔域是由若干个空格来间隔的，那么用cut就处理不了，因为cut只擅长处理“以一个字符间隔”的文本内容。
#sed -n  l aa.txt   ---查看aa.txt内容，可以让制表符区别于空格而原形毕露。如果是制表符（TAB），那么会显示为\t符号，如果是空格，就会原样显示。

EOF是END Of File的缩写,表示自定义终止符.EOF一般会配合cat能够多行文本输入.
其用法如下:
<<EOF          //开始
....
EOF            //结束
比如:
###向test.txt输入who换行what 这样的两行内容
cat << EOF >test.txt
> who
> what
> EOF

###向test.txt中追加多行记录
cat >>test.txt << EOF
> 111111
> 222222
> EOF

-------------------grep命令
grep -C 5 key file                        ---显示file文件里匹配key字串那行以及上下5行
grep -B 5 key file                        ---显示key及前5行
grep -A 5 key file                        ---显示key及后5行
grep "text" file1 file2                   ---多文件查找
grep -l "text" file1 file2                ---匹配文本在哪些文件
grep "text" . -r -n                       ---多级目录中对文本进行递归查找
grep -v "text" file                       ---反转查找，输出除之外的所有行
grep -E "[1-9]+" file                     ---正则表达式查找
grep -c "text" file                       ---统计文本中包含匹配字符串的行数
grep -i "text" file                       ---忽略大小写查找
grep -e "a" -e "b"                        ----e指定多个匹配样式查找
grep "text" . -r --include *.{java,html}  ---在目录中.java和.html文件中递归查找
grep "text" . -r --exclude "README"       ---结果中排除README文件
grep "text" . -r --exclude-from filelist  ---结果中排除filelist列的文件

-------------------tee命令


----------------------------------------------------------------