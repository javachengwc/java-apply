1，hashCode()与equals()方法的关系
hashCode()方法得到对象的哈希值，相当于对象指纹信息，可以使用hashcode做一些提前预判。
    如果两个对象hashcode不相同，那这两个对象一定是不同的对象。
    如果连个对象hashcode相同，不表示两个对象一定是同一个对象，有可能是两个对象。
    如果两个对象相等，那么它们的hashcode就一定相等。
java中一些集合类（map）实现中，比较两个对象是否相等，会先调用对象hashCode()得到hashcode，先比较hashcode,
如果hashcode不相同，就直接认为两个对象不相同；如果hashcode相等，再进行equals()方法调用，来确定两个对象
最终是否相等。所以在写equals()方法时，也要注意hashCode()方法,遵守上面的准则。

2，==和equals()方法的区别
==，如果是基本数据类型进行比较，比较的是值；如果是引用类型，比较的是引用地址。
equals()方法是各个类重写equals()方法后的比较逻辑。

3，重载和重写的区别
重载：发生在同一个类中，方法名相同，但参数类型或个数或顺序不同，方法返回值和访问修饰符也可以不同。
重写：发生在父子类中，子类重实现父类方法，返回值范围小于等于父类，抛出的异常范围小于等于父类，
访问修饰符范围大于等于父类。遵循里氏替换原则。

4，String,StringBuilder,StringBuffer的区别
String是常量(final)字符串，内部结构是 final char [],是不可变的。如果改变，会生成一个新的字符串对象。
StringBuilder是可变的，是线程不安全的。
StringBuffer是可变的，是线程安全的。

5，深拷贝和浅拷贝
一个对象中存在两种类型的属性，一种是基本数据类型，一种是引用类型。
浅拷贝只会拷贝对象的基本数据类型的成员的值，以及引用类型的成员的引用地址，并不会复制一份引用地址所指向的对象。
深拷贝既会拷贝对象的基本数据类型的成员的值，也会对引用类型的成员的引用地址所指向的对象进行复制。

6，java中的异常体系
java中异常的顶级父类是Throwable,它有两个子类Error和Exception,
Error表示非常严重的错误，比如OutOfMemoryError, 通常Error出现时，程序也运行不了。
不需要在程序中进行捕获，程序也解决不了Error报错，一般是jvm，磁盘，操作系统层面出现的问题。
Exception分为运行时异常RuntimeException和非运行时异常
RuntimeException表示代码运行期间可能出现的异常，比如NullPointerException,IndexOutOfBoundsException等。
RuntimeException是非检查异常，一般是由程序逻辑错误引起的，程序可以选择捕获处理或则不处理。
非RuntimeException表示非运行时异常，也就是检查异常，比如IOException,SQLException等。
是必须进行处理的异常，如果不处理，编译检查不会通过。

7，类加载器的双亲委派机制
jvm自带三个类加载器，启动类加载器-BootstrapClassLoader，扩展类加载器-ExtClassLoader，应用类加载器-AppClassLoader。
BootstrapClassLoader是ExtClassLoader的父类加载器，负责加载%JAVA_HOME%/lib下的jar包和类。
ExtClassLoader是AppClassLoader的父类加载器，负责加载%JAVA_HOME%/lib/ext下的jar包和类。
AppClassLoader是应用类加载器，加载classpath下的jar包和类。
jvm在加载一个类时，会通过AppClassLoader来加载这个类，在加载过程中，会先通过父类ExtClassLoader来加载，
同样ExtClassLoader对类进行加载，会先通过父类BootstrapClassLoader来进行加载，如果BootstrapClassLoader没加载到，
那么ExtClassLoader会尝试自己加载此类，如果也没加载到，会由AppClassLoader来加载此类。
所以双亲委派指的是，jvm在加载类时，委派给父类ExtClassLoader，顶级父类BootstrapClassLoader进行加载，
如果没加载到才由自己进行加载。

7，ThreadLocal的底层原理
ThreadLocal是一个线程本地对象，数据保存到线程内部，线程可在任意时刻获取到保存的数据。
它是通过当前线程对象的ThreadLocalMap对象来保存数据的。
保存数据时，先获取到当前线程对象，通过线程对象获取到此线程的ThreadLocalMap对象,
以ThreadLocal对象为key，value为需要保存的值这样的形式保存到此map中。
获取数据时，先获取到当前线程对象，进一步得到此线程的ThreadLocalMap对象,获取key为ThreadLocal对象的值。

8，java死锁如何避免
出现死锁的条件：
a，一个资源每次只能被一个线程使用
b，一个线程在阻塞等待某个资源时，不会释放已占有的资源
c，一个线程已经获得的资源，在未使用完之前不释放
d，多个线程形成头尾相接的循环等待资源关系
如果要避免死锁，只要不满足其中一个条件即可，而前3个条件是锁不许符合的条件，所以避免死锁打破第4个条件即可。
在开发过程中：
a，注意加锁顺序，保证每个线程按同样的顺序进行加锁
b，注意加锁时限，可以根据情况设置一个超时时间





