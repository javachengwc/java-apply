-------------------------------mat使用----------------------------------
mat官网:http://www.eclipse.org/mat/index.php(可下载mat)
mat(Memory Analyzer Tool)，是一个快速、功能丰富的Java heap分析工具，它可以查找内存泄漏和减少内存消耗。
使用内存分析工具从众多的对象中进行分析，快速的计算出在内存中对象的占用大小，看看是谁阻止了垃圾收集器的回收工作，并可以通过报表直观的查看到可能造成这种结果的对象。
mat设置自身内存方式:一个是修改启动参数 MemoryAnalyzer.exe-vmargs -Xmx2g
另一种是编辑文件MemoryAnalyzer.ini在里面添加类似信息 -vmargs– Xmx2g

histogram---直方图，列出每个类的对象个数以及类对象占用的内存大小以及类对象引用的内存大小
dominator tree---支配树，树形列出对象的内存大小及对应引用的内存大小还有占用内存的百分比，按照占用百分比降序排列
                 展开树节点展示的子节点对象是父节点直接或间接能引用到的所有对象
top consumers---列出消耗最大的几个对象，按照类和包的方式呈现
duplicate classes---列出被多个类加载器重复加载的类
leak suspects---列出可疑的内存漏洞

术语:
shallow size---对象自身中有的内存大小,也就是对象头加成员变量（不是成员变量的值）的总和。
    对象头占用8字节，成员变量如果是引用了其他对象或数据它始终占用4字节(64位系统为8字节)。
    对于String对象实例在32位系统中来说，它有三个int成员（3*4=12字节）、一个char[]成员（1*4=4字节）以及一个对象头（8字节），总共3*4 +1*4+8=24字节。
retained size---对象自身大小 + 该对象直接或是间接引用对象的shallow size
gc root---所有的对象引用refer chain的起点。(引用链能追踪到根节点的对象,垃圾回收的时候不会被回收)

操作:
list objects--with outgoing references: 查看此对象引用的外部对象。
list objects--with incoming references:查看此对象被哪些外部对象引用。
show objects by class--with outgoing references:查看此对象的类型引用的外部对象类
show objects by class--with incoming references:查看此对象的类型被哪些外部对象类引用
paths to gc root:显示不同类型引用到根节点(gc root)的路径。
merge shorest path to gc root:到gc root的最短路径。
java basics--classloader:显示此对象对应的classloader信息。如果存在PermSize不足及持久代内存溢出，需要进行此操作进行查看
java basics--thread details:显示此对象线程信息
java basics--thread stacks:显示此对象线程堆栈

解释:
Shortest Paths To the Accumulation Point   从GC root到聚集点的最短路径
Accumulated Objects                        聚焦的对象
Accumulated Objects by Class               聚集的对象实例的类名

------------------------------------------------------------------------