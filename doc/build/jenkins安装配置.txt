------------------------------------jenkins安装配置-----------------------------------
前提:已安装jdk
wget https://prodjenkinsreleases.blob.core.windows.net/redhat-stable/jenkins-2.164.3-1.1.noarch.rpm
rpm -ivh jenkins-2.164.3-1.1.noarch.rpm    #安装jenkins
默认安装后各路径
    /var/lib/jenkins             #jenkins安装目录
    /var/lib/jenkins/workspace   #jenkins工作空间
    /etc/sysconfig/jenkins       #jenkins服务配置文件，服务端口，jvm配置都在这里
    /var/lib/jenkins/config.xml  #jenkins具体配置文件
    /var/lib/jenkins/users       #jenkins的所有用户配置目录
    /var/lib/jenkins/plugins/    #jenkins插件所在目录,如果下载慢，可以用现成的直接覆盖
    /var/lib/jenkins/updates/default.json
    /var/lib/jenkins/hudson.model.UpdateCenter.xml          ###jenkins插件下载源地址
    如果官网下载太慢，可改成镜像站，比如:https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json
service jenkins start            #启动jenkins
#启动中如果报错,根据提示查看报错信息，比如报错Jenkins bash: /usr/bin/java: No such file or directory
表示在/usr/bin下没找到java命令，可能没装java或者java命令没在此目录下，安装java或建立对应的软连接即可
http://localhost:8080            #web访问jenkins，默认端口8080，这里最好用chrome浏览器来打开
#根据提示输入密码，然后选择安装插件，设置一个admin账号，jenkins的安装就完成.

##debian系统下安装jenkins
wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -
sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
sudo apt-get update
sudo apt-get install jenkins
如果报错
jenkins : Depends: default-jre-headless (>= 2:1.8) but it is not going to be installed or
                    java8-runtime-headless but it is not installable
通过相应的包来安装
wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/debian-stable/jenkins_2.32.1_all.deb
dpkg -i jenkins_2.32.1_all.deb
如果任然报同样的错误
那是安装的jdk是通过tar包解压缩安装的，而debian的包管理器（package manager）并不清楚已经安装了最新的jdk，
因此需要将安装的jdk信息加入到Ubuntu的包管理器当中，依次运行如下命令
sudo apt-get update
sudo apt-get remove default-jre default-jdk
sudo apt-get update
sudo apt-get install default-jre default-jdk

-----------------------------------------
jenkins配置
admin账号登录进入jenkins后
系统管理--Global Tool Configuration中设置系统中maven,jdk相关路径

凭证--系统--（根据需要在添加域中添加一个自定义的凭据域，然后在此凭据域中添加一个认证设置),也可以直接在全局凭证域下直接添加一个认证设置。
对于gitlab认证账号来说，此认证设置就是一个能访问此gitlab项目的ssh账号，配置上对应的私钥key内容即可,也可以是一个配置账号密码的账号,
这个可以先不设置，在创建构建项目的的时候，源码管理中，添加对应的认证配置也可。

系统管理--管理用户中添加用户

系统管理--Configure Global Security中设置各用户安全访问控制，勾选启动安全，访问控制中安全域选Jenkins专有用户数据库，
授权策略选项如果选择项目矩阵授权策略,可在这里添加用户，对用户进行授权,这里如果设置误操作,导致管理员账号再次登录时没有Overall/Read权限，
可按如下方法解决
    vim /var/lib/jenkins/config.xml找到<authorizationStrategy>节点在里面加上
    <permission>hudson.model.Hudson.Administer:admin</permission>,admin是具有管理权限的一个账号,
    然后重启jenkins即可。
这里说明下,安全矩阵和项目矩阵授权策略的配置是一模一样的，唯一的区别是项目矩阵授权策略支持在Job的配置页面再次配置授权策略。
一般使用中授权策略选项会选择Role-Based Strategy,基于角色的项目权限管理，
由于jenkins默认的权限管理体系不支持用户组或角色的配置，因此需要安装第三发插件Role-Based Strategy来支持角色的配置。
系统管理--Manage and Assign Roles进入角色管理页面,
Manage Roles中创建全局角色、项目角色，并可以为角色分配权限。项目角色与全局角色的区别就是，项目角色只能管理项目，没有管理jenkins的权限配置。
添加项目角色时，需要制定匹配项目的模式，官方文档介绍该选项支持正则表达式，如“Pro-.”表示所有以Pro-开头的项目，
“(?i)roger-.*”表示以roger-开头的项目并且不区分大小写，也可以使用“abc|bcd|efg”直接匹配多个项目。
Assign Roles中为用户赋予角色

系统管理-->系统日志-->日志级别
设置javax.jmdns	为OFF，避免jenkins产生海量日志

jenkins打通免密登录
vim /etc/passwd         ###修改jenkins账号可shell
    jenkins:x:997:995:Jenkins Automation Server:/var/lib/jenkins:/bin/bash
su jenkins
cd
ssh-keygen -t rsa
ssh-copy-id -i .ssh/id_rsa.pub root@192.168.1.2
ssh root@192.168.1.2
exit

由于jenkins的漏洞太多，配置防火墙进行访问控制
iptables -A INPUT -p tcp --dport 22 -j ACCEPT
iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT
iptables -A INPUT -s 允许访问的ip -p tcp --dport 8080 -j ACCEPT
iptables -A OUTPUT -p tcp --sport 8080 -j ACCEPT
iptables -P INPUT DROP
iptables -P FORWARD DROP
iptables -P OUTPUT DROP
service iptables save
iptables -L -n                           ###查看防火墙配置
service iptables start                   ###启动防火墙

至此jenkins的基本设置完成。
---------------------------------------
jenkins创建配置并构建项目
在jenkins上创建一个自由风格项目
对项目配置
a,如果需要启用项目安全，就勾选启用项目安全，就是配置哪些用户对此项目有哪些权限
b,参数化构建过程,对定义的参数aa,在使用的时候引用它直接用$aa来引用即可
c,Git--Repositories中配置项目对应的git地址，并在Credentials中配置对应的有访问项目权限的账号
在构建中，增加一个execute shell,执行项目的编译打包，比如:
    export M2_HOME=/usr/local/maven
    export PATH=$M2_HOME/bin:$PATH
    mvn clean compile package
在构建中，再增加一个execute shell,执行项目部署或启动的操作，比如
    cp -rp ./test/target/*.jar /data/deploy/test
配置完后，进入项目，点击立即构建，在build history中就能查看到最新的构建列表
点进此次构建列表项，点击Console Output就能查看此次构建过程详细日志信息了
--------------------------------------------------------------------------------------